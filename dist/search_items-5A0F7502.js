searchNodes=[{"doc":"Plejady keeps the contexts that define your domain and business logic. Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"Plejady.html","title":"Plejady","type":"module"},{"doc":"Provides logic for managing accounts. This includes users, guests, admins, etc.","ref":"Plejady.Accounts.html","title":"Plejady.Accounts","type":"module"},{"doc":"Creates a new guest. This is a database action.","ref":"Plejady.Accounts.html#create_guest/1","title":"Plejady.Accounts.create_guest/1","type":"function"},{"doc":"Deletes a suggested admin by its id. This is a database action.","ref":"Plejady.Accounts.html#delete_suggested_admin/1","title":"Plejady.Accounts.delete_suggested_admin/1","type":"function"},{"doc":"Checks if there are any other users registered. If not, this function returns true .","ref":"Plejady.Accounts.html#first_user?/0","title":"Plejady.Accounts.first_user?/0","type":"function"},{"doc":"Fetches all admins.","ref":"Plejady.Accounts.html#get_admins/0","title":"Plejady.Accounts.get_admins/0","type":"function"},{"doc":"Fetches a number of free guest places.","ref":"Plejady.Accounts.html#get_free_guest_places/0","title":"Plejady.Accounts.get_free_guest_places/0","type":"function"},{"doc":"Fetches a user by email.","ref":"Plejady.Accounts.html#get_user_by_email/1","title":"Plejady.Accounts.get_user_by_email/1","type":"function"},{"doc":"Strips off admin rights from the user with the given id. This is a database action.","ref":"Plejady.Accounts.html#strip_off_admin/1","title":"Plejady.Accounts.strip_off_admin/1","type":"function"},{"doc":"Transfers the admin lead role to another user (specified by their email). This is a database action.","ref":"Plejady.Accounts.html#transfer_admin/2","title":"Plejady.Accounts.transfer_admin/2","type":"function"},{"doc":"Provides logic for guest users (users whose email is not a student's email).","ref":"Plejady.Accounts.Guest.html","title":"Plejady.Accounts.Guest","type":"module"},{"doc":"Creates a changeset based on the guest struct and params .","ref":"Plejady.Accounts.Guest.html#new/2","title":"Plejady.Accounts.Guest.new/2","type":"function"},{"doc":"Validates if the given field is not a student's email.","ref":"Plejady.Accounts.Guest.html#validate_if_not_student/2","title":"Plejady.Accounts.Guest.validate_if_not_student/2","type":"function"},{"doc":"Provides logic for suggested admins (users that will automatically become admins).","ref":"Plejady.Accounts.SuggestedAdmin.html","title":"Plejady.Accounts.SuggestedAdmin","type":"module"},{"doc":"Creates a changeset based on the struct and params .","ref":"Plejady.Accounts.SuggestedAdmin.html#changeset/2","title":"Plejady.Accounts.SuggestedAdmin.changeset/2","type":"function"},{"doc":"Creates a new suggested admin and inserts it into the database. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#create/1","title":"Plejady.Accounts.SuggestedAdmin.create/1","type":"function"},{"doc":"Deletes the suggested admin with the given email. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#delete_by_email/1","title":"Plejady.Accounts.SuggestedAdmin.delete_by_email/1","type":"function"},{"doc":"Returns the list of all suggested admins. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#get/0","title":"Plejady.Accounts.SuggestedAdmin.get/0","type":"function"},{"doc":"Returns the suggested admin with the given email. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#get_by_email/1","title":"Plejady.Accounts.SuggestedAdmin.get_by_email/1","type":"function"},{"doc":"Utilities for managing user tokens.","ref":"Plejady.Accounts.Token.html","title":"Plejady.Accounts.Token","type":"module"},{"doc":"Deletes the session token from the database. This is a database action.","ref":"Plejady.Accounts.Token.html#delete_session_token/1","title":"Plejady.Accounts.Token.delete_session_token/1","type":"function"},{"doc":"Generates a new session token for the given user and inserts it into the database. This is a database action.","ref":"Plejady.Accounts.Token.html#generate_user_session_token/1","title":"Plejady.Accounts.Token.generate_user_session_token/1","type":"function"},{"doc":"Returns the user with the given session token. This is a database action.","ref":"Plejady.Accounts.Token.html#get_user_by_session_token/1","title":"Plejady.Accounts.Token.get_user_by_session_token/1","type":"function"},{"doc":"Provides logic for managing users.","ref":"Plejady.Accounts.User.html","title":"Plejady.Accounts.User","type":"module"},{"doc":"Gives the given user admin rights. This is a database action.","ref":"Plejady.Accounts.User.html#make_user_admin/1","title":"Plejady.Accounts.User.make_user_admin/1","type":"function"},{"doc":"Removes admin rights from the given user. This is a database action.","ref":"Plejady.Accounts.User.html#strip_off_admin/1","title":"Plejady.Accounts.User.strip_off_admin/1","type":"function"},{"doc":"Provides logic for promoting users.","ref":"Plejady.Accounts.User.Promotion.html","title":"Plejady.Accounts.User.Promotion","type":"module"},{"doc":"Creates an empty changeset","ref":"Plejady.Accounts.User.Promotion.html#changeset/0","title":"Plejady.Accounts.User.Promotion.changeset/0","type":"function"},{"doc":"Creates a new changeset based on the promotion struct and params .","ref":"Plejady.Accounts.User.Promotion.html#changeset/2","title":"Plejady.Accounts.User.Promotion.changeset/2","type":"function"},{"doc":"Returns the completed Promotion struct regardless of changeset validity. In our case it doesn't matter if the changeset is valid or not, because we validate the integrity of the data during form validation.","ref":"Plejady.Accounts.User.Promotion.html#create/1","title":"Plejady.Accounts.User.Promotion.create/1","type":"function"},{"doc":"Either promotes the user or creates a new suggested admin. This is a database action.","ref":"Plejady.Accounts.User.Promotion.html#promote/1","title":"Plejady.Accounts.User.Promotion.promote/1","type":"function"},{"doc":"Provides logic for managing user tokens.","ref":"Plejady.Accounts.UserToken.html","title":"Plejady.Accounts.UserToken","type":"module"},{"doc":"Builds a session token bound to the given user.","ref":"Plejady.Accounts.UserToken.html#build_session_token/1","title":"Plejady.Accounts.UserToken.build_session_token/1","type":"function"},{"doc":"Builds a query for the given token and context.","ref":"Plejady.Accounts.UserToken.html#token_and_context_query/2","title":"Plejady.Accounts.UserToken.token_and_context_query/2","type":"function"},{"doc":"Builds a query for the given session token with correct validity checking.","ref":"Plejady.Accounts.UserToken.html#verify_session_token_query/1","title":"Plejady.Accounts.UserToken.verify_session_token_query/1","type":"function"},{"doc":"This module is responsible for initializing the cache with the data from the database. Implements GenServer behaviour.","ref":"Plejady.CacheInitiator.html","title":"Plejady.CacheInitiator","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Plejady.CacheInitiator.html#child_spec/1","title":"Plejady.CacheInitiator.child_spec/1","type":"function"},{"doc":"","ref":"Plejady.CacheInitiator.html#start_link/1","title":"Plejady.CacheInitiator.start_link/1","type":"function"},{"doc":"Provides the model and logic for the application config. Uses a GenServer to store the config in memory and provide a simple API for accessing and updating it.","ref":"Plejady.Config.html","title":"Plejady.Config","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Plejady.Config.html#child_spec/1","title":"Plejady.Config.child_spec/1","type":"function"},{"doc":"Fetches the current config.","ref":"Plejady.Config.html#get_config/0","title":"Plejady.Config.get_config/0","type":"function"},{"doc":"Updates the current config.","ref":"Plejady.Config.html#set_config/1","title":"Plejady.Config.set_config/1","type":"function"},{"doc":"Starts the Plejady.Config GenServer implementation.","ref":"Plejady.Config.html#start_link/1","title":"Plejady.Config.start_link/1","type":"function"},{"doc":"Model and helpers for the Plejady.Config schema.","ref":"Plejady.Config.Schema.html","title":"Plejady.Config.Schema","type":"module"},{"doc":"Creates a changeset based on the Schema struct and params .","ref":"Plejady.Config.Schema.html#changeset/2","title":"Plejady.Config.Schema.changeset/2","type":"function"},{"doc":"The default value for a config.","ref":"Plejady.Config.Schema.html#default/0","title":"Plejady.Config.Schema.default/0","type":"function"},{"doc":"Takes the parameters from the form and returns a Config struct.","ref":"Plejady.Config.Schema.html#from_changeset/1","title":"Plejady.Config.Schema.from_changeset/1","type":"function"},{"doc":"Returns a new config.","ref":"Plejady.Config.Schema.html#new/2","title":"Plejady.Config.Schema.new/2","type":"function"},{"doc":"Returns a changeset with the updated guest capacity","ref":"Plejady.Config.Schema.html#update_guest_capacity/2","title":"Plejady.Config.Schema.update_guest_capacity/2","type":"function"},{"doc":"This module defines the setup for tests requiring access to the application's data layer. You may define functions here to be used as helpers in your tests. Finally, if the test case interacts with the database, we enable the SQL sandbox, so changes done to the database are reverted at the end of every test. If you are using PostgreSQL, you can even run database tests asynchronously by setting use Plejady.DataCase, async: true , although this option is not recommended for other databases.","ref":"Plejady.DataCase.html","title":"Plejady.DataCase","type":"module"},{"doc":"A helper that transforms changeset errors into a map of messages. assert { :error , changeset } = Accounts . create_user ( %{ password : &quot;short&quot; } ) assert &quot;password is too short&quot; in errors_on ( changeset ) . password assert %{ password : [ &quot;password is too short&quot; ] } = errors_on ( changeset )","ref":"Plejady.DataCase.html#errors_on/1","title":"Plejady.DataCase.errors_on/1","type":"function"},{"doc":"Sets up the sandbox based on the test tags.","ref":"Plejady.DataCase.html#setup_sandbox/1","title":"Plejady.DataCase.setup_sandbox/1","type":"function"},{"doc":"Provides the model and logic for presentations.","ref":"Plejady.Presentation.html","title":"Plejady.Presentation","type":"module"},{"doc":"Fetches all presentations from the database.","ref":"Plejady.Presentation.html#all/0","title":"Plejady.Presentation.all/0","type":"function"},{"doc":"Fetches all presentations from the database, preloading their room, timeblock and registrations.","ref":"Plejady.Presentation.html#all_preloaded/0","title":"Plejady.Presentation.all_preloaded/0","type":"function"},{"doc":"Creates a new changeset based on the presentation struct and params .","ref":"Plejady.Presentation.html#changeset/2","title":"Plejady.Presentation.changeset/2","type":"function"},{"doc":"Creates a new presentation and inserts it into the database. This is a database action.","ref":"Plejady.Presentation.html#create/2","title":"Plejady.Presentation.create/2","type":"function"},{"doc":"Deletes a presentation from the database. This is a database action.","ref":"Plejady.Presentation.html#delete/1","title":"Plejady.Presentation.delete/1","type":"function"},{"doc":"Fetches a presentation by its ID from the database.","ref":"Plejady.Presentation.html#get!/1","title":"Plejady.Presentation.get!/1","type":"function"},{"doc":"Updates a new presentation and updates it in the database. This is a database action.","ref":"Plejady.Presentation.html#update/2","title":"Plejady.Presentation.update/2","type":"function"},{"doc":"Provides the model and logic for registrations.","ref":"Plejady.Registration.html","title":"Plejady.Registration","type":"module"},{"doc":"Creates a new changeset based on the registration struct and params .","ref":"Plejady.Registration.html#changeset/2","title":"Plejady.Registration.changeset/2","type":"function"},{"doc":"Moves a registration from one presentation to another. Arguments from and to are presentation IDs. This is a database action.","ref":"Plejady.Registration.html#move/3","title":"Plejady.Registration.move/3","type":"function"},{"doc":"Creates a new registration and inserts it into the database. This is a database action.","ref":"Plejady.Registration.html#new/2","title":"Plejady.Registration.new/2","type":"function"},{"doc":"This module is responsible for managing the registry of presentations and their occupancy. It provides a super fast read-write cache for the real-time component of the app with fire-and-forget requests to the database for permanent storage. The Plejady.Registry struct is considered a source of truth for the app while running. It is prefetched with data from the database to avoid thousands of lookup requests. Next, it provides utility functions for fetching the occupancy of a presentation.","ref":"Plejady.Registry.html","title":"Plejady.Registry","type":"module"},{"doc":"Returns the statically-defined name of the cache used by the registry.","ref":"Plejady.Registry.html#cache_name/0","title":"Plejady.Registry.cache_name/0","type":"function"},{"doc":"Clears the cache.","ref":"Plejady.Registry.html#clear/0","title":"Plejady.Registry.clear/0","type":"function"},{"doc":"Fetches the occupancy of all presentations. Returns a map where keys are Plejady.Presentation ids and values are the number of signed users.","ref":"Plejady.Registry.html#fetch_occupancy/0","title":"Plejady.Registry.fetch_occupancy/0","type":"function"},{"doc":"Returns a list of Plejady.Presentation ids that a user specified by user_id is signed up for.","ref":"Plejady.Registry.html#fetch_signed_up_for/2","title":"Plejady.Registry.fetch_signed_up_for/2","type":"function"},{"doc":"Fetches the registry from the cache.","ref":"Plejady.Registry.html#get/0","title":"Plejady.Registry.get/0","type":"function"},{"doc":"Creates a new registry struct.","ref":"Plejady.Registry.html#new/3","title":"Plejady.Registry.new/3","type":"function"},{"doc":"","ref":"Plejady.Registry.html#update/3","title":"Plejady.Registry.update/3","type":"function"},{"doc":"","ref":"Plejady.Registry.html#t:t/0","title":"Plejady.Registry.t/0","type":"type"},{"doc":"Used for executing DB release tasks when run in production without Mix installed.","ref":"Plejady.Release.html","title":"Plejady.Release","type":"module"},{"doc":"","ref":"Plejady.Release.html#migrate/0","title":"Plejady.Release.migrate/0","type":"function"},{"doc":"","ref":"Plejady.Release.html#rollback/2","title":"Plejady.Release.rollback/2","type":"function"},{"doc":"The Ecto repository for this application. The functions here are automatically generated use Ecto.Repo .","ref":"Plejady.Repo.html","title":"Plejady.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"Plejady.Repo.html#aggregate/3","title":"Plejady.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"Plejady.Repo.html#aggregate/4","title":"Plejady.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"Plejady.Repo.html#all/2","title":"Plejady.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"Plejady.Repo.html#checked_out?/0","title":"Plejady.Repo.checked_out?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"Plejady.Repo.html#checkout/2","title":"Plejady.Repo.checkout/2","type":"function"},{"doc":"","ref":"Plejady.Repo.html#child_spec/1","title":"Plejady.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"Plejady.Repo.html#config/0","title":"Plejady.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"Plejady.Repo.html#default_options/1","title":"Plejady.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"Plejady.Repo.html#delete/2","title":"Plejady.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"Plejady.Repo.html#delete!/2","title":"Plejady.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"Plejady.Repo.html#delete_all/2","title":"Plejady.Repo.delete_all/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"Plejady.Repo.html#disconnect_all/2","title":"Plejady.Repo.disconnect_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"Plejady.Repo.html#exists?/2","title":"Plejady.Repo.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"Plejady.Repo.html#explain/3","title":"Plejady.Repo.explain/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"Plejady.Repo.html#get/3","title":"Plejady.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"Plejady.Repo.html#get!/3","title":"Plejady.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"Plejady.Repo.html#get_by/3","title":"Plejady.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"Plejady.Repo.html#get_by!/3","title":"Plejady.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"Plejady.Repo.html#get_dynamic_repo/0","title":"Plejady.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"Plejady.Repo.html#in_transaction?/0","title":"Plejady.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"Plejady.Repo.html#insert/2","title":"Plejady.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"Plejady.Repo.html#insert!/2","title":"Plejady.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"Plejady.Repo.html#insert_all/3","title":"Plejady.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"Plejady.Repo.html#insert_or_update/2","title":"Plejady.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"Plejady.Repo.html#insert_or_update!/2","title":"Plejady.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"Plejady.Repo.html#load/2","title":"Plejady.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"Plejady.Repo.html#one/2","title":"Plejady.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"Plejady.Repo.html#one!/2","title":"Plejady.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"Plejady.Repo.html#preload/3","title":"Plejady.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"Plejady.Repo.html#prepare_query/3","title":"Plejady.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"Plejady.Repo.html#put_dynamic_repo/1","title":"Plejady.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Plejady.Repo.html#query/3","title":"Plejady.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Plejady.Repo.html#query!/3","title":"Plejady.Repo.query!/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"Plejady.Repo.html#query_many/3","title":"Plejady.Repo.query_many/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"Plejady.Repo.html#query_many!/3","title":"Plejady.Repo.query_many!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"Plejady.Repo.html#reload/2","title":"Plejady.Repo.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"Plejady.Repo.html#reload!/2","title":"Plejady.Repo.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"Plejady.Repo.html#rollback/1","title":"Plejady.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"Plejady.Repo.html#start_link/1","title":"Plejady.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"Plejady.Repo.html#stop/1","title":"Plejady.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"Plejady.Repo.html#stream/2","title":"Plejady.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Plejady.Repo.html#to_sql/2","title":"Plejady.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"Plejady.Repo.html#transaction/2","title":"Plejady.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"Plejady.Repo.html#update/2","title":"Plejady.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"Plejady.Repo.html#update!/2","title":"Plejady.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"Plejady.Repo.html#update_all/3","title":"Plejady.Repo.update_all/3","type":"function"},{"doc":"Provides the model and logic for rooms.","ref":"Plejady.Room.html","title":"Plejady.Room","type":"module"},{"doc":"Returns a list of all rooms.","ref":"Plejady.Room.html#all/0","title":"Plejady.Room.all/0","type":"function"},{"doc":"Creates a new changeset based on the room struct and params .","ref":"Plejady.Room.html#changeset/2","title":"Plejady.Room.changeset/2","type":"function"},{"doc":"Creates a new room and inserts it into the database. This is a database action.","ref":"Plejady.Room.html#create/1","title":"Plejady.Room.create/1","type":"function"},{"doc":"Deletes a room by id. This is a database action.","ref":"Plejady.Room.html#delete/1","title":"Plejady.Room.delete/1","type":"function"},{"doc":"Fetch a room by id.","ref":"Plejady.Room.html#get!/1","title":"Plejady.Room.get!/1","type":"function"},{"doc":"Updates a room with the included params in the database. This is a database action.","ref":"Plejady.Room.html#update/2","title":"Plejady.Room.update/2","type":"function"},{"doc":"This module defines test helpers for creating entities via the Plejady.Testing context.","ref":"Plejady.TestingFixtures.html","title":"Plejady.TestingFixtures","type":"module"},{"doc":"Generate a test.","ref":"Plejady.TestingFixtures.html#test_fixture/1","title":"Plejady.TestingFixtures.test_fixture/1","type":"function"},{"doc":"Provides the model and logic for timeblocks.","ref":"Plejady.Timeblock.html","title":"Plejady.Timeblock","type":"module"},{"doc":"Returns a list of all timeblocks.","ref":"Plejady.Timeblock.html#all/0","title":"Plejady.Timeblock.all/0","type":"function"},{"doc":"Creates a new changeset based on the timeblock struct and params .","ref":"Plejady.Timeblock.html#changeset/2","title":"Plejady.Timeblock.changeset/2","type":"function"},{"doc":"Creates a new timeblock and inserts it into the database. This is a database action.","ref":"Plejady.Timeblock.html#create/1","title":"Plejady.Timeblock.create/1","type":"function"},{"doc":"Deletes a timeblock by id. This is a database action.","ref":"Plejady.Timeblock.html#delete/1","title":"Plejady.Timeblock.delete/1","type":"function"},{"doc":"","ref":"Plejady.Timeblock.html#format_time/1","title":"Plejady.Timeblock.format_time/1","type":"function"},{"doc":"Returns a single timeblock by id. If no timeblock is found, returns nil .","ref":"Plejady.Timeblock.html#get!/1","title":"Plejady.Timeblock.get!/1","type":"function"},{"doc":"Updates a timeblock with the included params in the database.","ref":"Plejady.Timeblock.html#update/2","title":"Plejady.Timeblock.update/2","type":"function"},{"doc":"The entrypoint for defining your web interface, such as controllers, components, channels, and so on. This can be used in your application as: use PlejadyWeb , :controller use PlejadyWeb , :html The definitions below will be executed for every controller, component, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define additional modules and import those modules here.","ref":"PlejadyWeb.html","title":"PlejadyWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"PlejadyWeb.html#__using__/1","title":"PlejadyWeb.__using__/1","type":"macro"},{"doc":"","ref":"PlejadyWeb.html#channel/0","title":"PlejadyWeb.channel/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#controller/0","title":"PlejadyWeb.controller/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#html/0","title":"PlejadyWeb.html/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#live_component/0","title":"PlejadyWeb.live_component/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#live_view/0","title":"PlejadyWeb.live_view/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#router/0","title":"PlejadyWeb.router/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#static_paths/0","title":"PlejadyWeb.static_paths/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#verified_routes/0","title":"PlejadyWeb.verified_routes/0","type":"function"},{"doc":"Controller for handling authentication. Uses Ueberauth to simplify the code in the app itself.","ref":"PlejadyWeb.AuthController.html","title":"PlejadyWeb.AuthController","type":"module"},{"doc":"Callback after an OAuth authentication. Handles both successful and unsuccessful logins.","ref":"PlejadyWeb.AuthController.html#callback/2","title":"PlejadyWeb.AuthController.callback/2","type":"function"},{"doc":"Used in the app router to log out the user.","ref":"PlejadyWeb.AuthController.html#delete/2","title":"PlejadyWeb.AuthController.delete/2","type":"function"},{"doc":"Called when Ueberauth tries to authenticate the user. Either the authentication method is supported and the calling of this function is hijacked by the Ueberauth provider, or this function is called and an error is shown.","ref":"PlejadyWeb.AuthController.html#request/2","title":"PlejadyWeb.AuthController.request/2","type":"function"},{"doc":"This module defines the test case to be used by tests that require setting up a connection. Such tests rely on Phoenix.ConnTest and also import other functionality to make it easier to build common data structures and query the data layer. Finally, if the test case interacts with the database, we enable the SQL sandbox, so changes done to the database are reverted at the end of every test. If you are using PostgreSQL, you can even run database tests asynchronously by setting use PlejadyWeb.ConnCase, async: true , although this option is not recommended for other databases.","ref":"PlejadyWeb.ConnCase.html","title":"PlejadyWeb.ConnCase","type":"module"},{"doc":"Provides core UI components. The components in this module use Tailwind CSS, a utility-first CSS framework. See the Tailwind CSS documentation to learn how to customize the generated components in this module. Icons are provided by heroicons . See icon/1 for usage.","ref":"PlejadyWeb.CoreComponents.html","title":"PlejadyWeb.CoreComponents","type":"module"},{"doc":"Renders a back navigation link. Examples &lt; . back navigate = { ~p&quot;/posts&quot; } &gt; Back to posts &lt; / . back &gt; Attributes navigate ( :any ) (required) Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#back/1","title":"PlejadyWeb.CoreComponents.back/1","type":"function"},{"doc":"Renders a button. Examples &lt; . button &gt; Send ! &lt; / . button &gt; &lt; . button phx - click = &quot;go&quot; class = &quot;ml-2&quot; &gt; Send ! &lt; / . button &gt; Attributes type ( :string ) - Defaults to nil . class ( :string ) - Defaults to nil . Global attributes are accepted. Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#button/1","title":"PlejadyWeb.CoreComponents.button/1","type":"function"},{"doc":"Generates a generic error message. Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#error/1","title":"PlejadyWeb.CoreComponents.error/1","type":"function"},{"doc":"Renders flash notices. Examples &lt; . flash kind = { :info } flash = { @flash } / &gt; &lt; . flash kind = { :info } phx - mounted = { show ( &quot;#flash&quot; ) } &gt; Welcome Back ! &lt; / . flash &gt; Attributes id ( :string ) - the optional id of flash container. Defaults to &quot;flash&quot; . flash ( :map ) - the map of flash messages to display. Defaults to %{} . title ( :string ) - Defaults to nil . kind ( :atom ) - used for styling and flash lookup.Must be one of :info , or :error . autoshow ( :boolean ) - whether to auto show the flash on mount. Defaults to true . close ( :boolean ) - whether the flash can be closed. Defaults to true . Global attributes are accepted. Slots inner_block - the optional inner block that renders the flash message.","ref":"PlejadyWeb.CoreComponents.html#flash/1","title":"PlejadyWeb.CoreComponents.flash/1","type":"function"},{"doc":"Shows the flash group with standard titles and content. Examples &lt; . flash_group flash = { @flash } / &gt; Attributes flash ( :map ) (required) - the map of flash messages.","ref":"PlejadyWeb.CoreComponents.html#flash_group/1","title":"PlejadyWeb.CoreComponents.flash_group/1","type":"function"},{"doc":"Renders a header with title. Attributes class ( :string ) - Defaults to nil . Slots inner_block (required) subtitle actions","ref":"PlejadyWeb.CoreComponents.html#header/1","title":"PlejadyWeb.CoreComponents.header/1","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#hide/2","title":"PlejadyWeb.CoreComponents.hide/2","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#hide_modal/2","title":"PlejadyWeb.CoreComponents.hide_modal/2","type":"function"},{"doc":"Renders a Hero Icon . Hero icons come in three styles – outline, solid, and mini. By default, the outline style is used, but solid an mini may be applied by using the -solid and -mini suffix. You can customize the size and colors of the icons by setting width, height, and background color classes. Icons are extracted from your priv/hero_icons directory and bundled within your compiled app.css by the plugin in your assets/tailwind.config.js . Examples &lt; . icon name = &quot;hero-cake&quot; / &gt; &lt; . icon name = &quot;hero-cake-solid&quot; / &gt; &lt; . icon name = &quot;hero-cake-mini&quot; / &gt; &lt; . icon name = &quot;hero-bolt&quot; class = &quot;bg-blue-500 w-10 h-10&quot; / &gt; Attributes name ( :string ) (required) class ( :string ) - Defaults to nil .","ref":"PlejadyWeb.CoreComponents.html#icon/1","title":"PlejadyWeb.CoreComponents.icon/1","type":"function"},{"doc":"Renders an input with label and error messages. A %Phoenix.HTML.Form{} and field name may be passed to the input to build input names and error messages, or all the attributes and errors may be passed explicitly. Examples &lt; . input field = { @form [ :email ] } type = &quot;email&quot; / &gt; &lt; . input name = &quot;my-input&quot; errors = { [ &quot;oh no!&quot; ] } / &gt; Attributes id ( :any ) - Defaults to nil . name ( :any ) label ( :string ) - Defaults to nil . value ( :any ) type ( :string ) - Defaults to &quot;text&quot; . field ( Phoenix.HTML.FormField ) - a form field struct retrieved from the form, for example: @form[:email]. errors ( :list ) - Defaults to [] . checked ( :boolean ) - the checked flag for checkbox inputs. prompt ( :string ) - the prompt for select inputs. Defaults to nil . options ( :list ) - the options to pass to Phoenix.HTML.Form.options_for_select/2. multiple ( :boolean ) - the multiple flag for select inputs. Defaults to false . Global attributes are accepted. Slots inner_block","ref":"PlejadyWeb.CoreComponents.html#input/1","title":"PlejadyWeb.CoreComponents.input/1","type":"function"},{"doc":"Renders a label. Attributes for ( :string ) - Defaults to nil . Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#label/1","title":"PlejadyWeb.CoreComponents.label/1","type":"function"},{"doc":"Renders a data list. Examples &lt; . list &gt; &lt; :item title = &quot;Title&quot; &gt; &lt; % = @post . title % &gt; &lt; / :item &gt; &lt; :item title = &quot;Views&quot; &gt; &lt; % = @post . views % &gt; &lt; / :item &gt; &lt; / . list &gt; Slots item (required) - Accepts attributes: title ( :string ) (required)","ref":"PlejadyWeb.CoreComponents.html#list/1","title":"PlejadyWeb.CoreComponents.list/1","type":"function"},{"doc":"Renders a modal. Examples &lt; . modal id = &quot;confirm-modal&quot; &gt; Are you sure? &lt; :confirm &gt; OK &lt; / :confirm &gt; &lt; :cancel &gt; Cancel &lt; / :cancel &gt; &lt; / . modal &gt; JS commands may be passed to the :on_cancel and on_confirm attributes for the caller to react to each button press, for example: &lt; . modal id = &quot;confirm&quot; on_confirm = { JS . push ( &quot;delete&quot; ) } on_cancel = { JS . navigate ( ~p&quot;/posts&quot; ) } &gt; Are you sure you? &lt; :confirm &gt; OK &lt; / :confirm &gt; &lt; :cancel &gt; Cancel &lt; / :cancel &gt; &lt; / . modal &gt; Attributes id ( :string ) (required) show ( :boolean ) - Defaults to false . on_cancel ( Phoenix.LiveView.JS ) - Defaults to %Phoenix.LiveView.JS{ops: []} . on_confirm ( Phoenix.LiveView.JS ) - Defaults to %Phoenix.LiveView.JS{ops: []} . Slots inner_block (required) title subtitle confirm cancel","ref":"PlejadyWeb.CoreComponents.html#modal/1","title":"PlejadyWeb.CoreComponents.modal/1","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#show/2","title":"PlejadyWeb.CoreComponents.show/2","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#show_modal/2","title":"PlejadyWeb.CoreComponents.show_modal/2","type":"function"},{"doc":"Renders a simple form. Examples &lt; . simple_form for = { @form } phx - change = &quot;validate&quot; phx - submit = &quot;save&quot; &gt; &lt; . input field = { @form [ :email ] } label = &quot;Email&quot; / &gt; &lt; . input field = { @form [ :username ] } label = &quot;Username&quot; / &gt; &lt; :actions &gt; &lt; . button &gt; Save &lt; / . button &gt; &lt; / :actions &gt; &lt; / . simple_form &gt; Attributes for ( :any ) (required) - the datastructure for the form. as ( :any ) - the server side parameter to collect all input under. Defaults to nil . Global attributes are accepted. Slots inner_block (required) actions - the slot for form actions, such as a submit button.","ref":"PlejadyWeb.CoreComponents.html#simple_form/1","title":"PlejadyWeb.CoreComponents.simple_form/1","type":"function"},{"doc":"Renders a table with generic styling. Examples &lt; . table id = &quot;users&quot; rows = { @users } &gt; &lt; :col :let = { user } label = &quot;id&quot; &gt; &lt; % = user . id % &gt; &lt; / :col &gt; &lt; :col :let = { user } label = &quot;username&quot; &gt; &lt; % = user . username % &gt; &lt; / :col &gt; &lt; / . table &gt; Attributes id ( :string ) (required) class ( :string ) - Defaults to nil . rows ( :list ) (required) row_id ( :any ) - the function for generating the row id. Defaults to nil . row_click ( :any ) - the function for handling phx-click on each row. Defaults to nil . row_item ( :any ) - the function for mapping each row before calling the :col and :action slots. Defaults to &amp;Function.identity/1 . Slots col (required) - Accepts attributes: label ( :string ) class ( :string ) action - the slot for showing user actions in the last table column.","ref":"PlejadyWeb.CoreComponents.html#table/1","title":"PlejadyWeb.CoreComponents.table/1","type":"function"},{"doc":"Translates an error message using gettext.","ref":"PlejadyWeb.CoreComponents.html#translate_error/1","title":"PlejadyWeb.CoreComponents.translate_error/1","type":"function"},{"doc":"Translates the errors for a field from a keyword list of errors.","ref":"PlejadyWeb.CoreComponents.html#translate_errors/2","title":"PlejadyWeb.CoreComponents.translate_errors/2","type":"function"},{"doc":"The endpoint for the PlejadyWeb application. Encapsulates all socket and plug configuration.","ref":"PlejadyWeb.Endpoint.html","title":"PlejadyWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"PlejadyWeb.Endpoint.html#broadcast/3","title":"PlejadyWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"PlejadyWeb.Endpoint.html#broadcast!/3","title":"PlejadyWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"PlejadyWeb.Endpoint.html#broadcast_from/4","title":"PlejadyWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"PlejadyWeb.Endpoint.html#broadcast_from!/4","title":"PlejadyWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2 .","ref":"PlejadyWeb.Endpoint.html#call/2","title":"PlejadyWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"PlejadyWeb.Endpoint.html#child_spec/1","title":"PlejadyWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"PlejadyWeb.Endpoint.html#config/2","title":"PlejadyWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"PlejadyWeb.Endpoint.html#config_change/2","title":"PlejadyWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"PlejadyWeb.Endpoint.html#host/0","title":"PlejadyWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"PlejadyWeb.Endpoint.html#init/1","title":"PlejadyWeb.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"PlejadyWeb.Endpoint.html#local_broadcast/3","title":"PlejadyWeb.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"PlejadyWeb.Endpoint.html#local_broadcast_from/4","title":"PlejadyWeb.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"PlejadyWeb.Endpoint.html#path/1","title":"PlejadyWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"PlejadyWeb.Endpoint.html#script_name/0","title":"PlejadyWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree. All other options are merged into the endpoint configuration.","ref":"PlejadyWeb.Endpoint.html#start_link/1","title":"PlejadyWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"PlejadyWeb.Endpoint.html#static_integrity/1","title":"PlejadyWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"PlejadyWeb.Endpoint.html#static_lookup/1","title":"PlejadyWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static .","ref":"PlejadyWeb.Endpoint.html#static_path/1","title":"PlejadyWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"PlejadyWeb.Endpoint.html#static_url/0","title":"PlejadyWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"PlejadyWeb.Endpoint.html#struct_url/0","title":"PlejadyWeb.Endpoint.struct_url/0","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"PlejadyWeb.Endpoint.html#subscribe/2","title":"PlejadyWeb.Endpoint.subscribe/2","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"PlejadyWeb.Endpoint.html#unsubscribe/1","title":"PlejadyWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"PlejadyWeb.Endpoint.html#url/0","title":"PlejadyWeb.Endpoint.url/0","type":"function"},{"doc":"Component library for the app header.","ref":"PlejadyWeb.Header.html","title":"PlejadyWeb.Header","type":"module"},{"doc":"A LiveComponent that renders the app header. Attributes title ( :string ) (required) current_user ( :map ) (required) Global attributes are accepted. Slots actions","ref":"PlejadyWeb.Header.html#app_header/1","title":"PlejadyWeb.Header.app_header/1","type":"function"},{"doc":"Provides LiveView hooks and helper functions for user authentication.","ref":"PlejadyWeb.UserAuth.html","title":"PlejadyWeb.UserAuth","type":"module"},{"doc":"Fetches the user that is saved in the socket token.","ref":"PlejadyWeb.UserAuth.html#fetch_current_user/2","title":"PlejadyWeb.UserAuth.fetch_current_user/2","type":"function"},{"doc":"Transforms the Ueberauth.Auth struct into a User struct and saves it to the database. This is a database action.","ref":"PlejadyWeb.UserAuth.html#get_user_by_auth/1","title":"PlejadyWeb.UserAuth.get_user_by_auth/1","type":"function"},{"doc":"Creates a new socket and logs the user in.","ref":"PlejadyWeb.UserAuth.html#log_in_user/3","title":"PlejadyWeb.UserAuth.log_in_user/3","type":"function"},{"doc":"Logs the user out.","ref":"PlejadyWeb.UserAuth.html#log_out_user/1","title":"PlejadyWeb.UserAuth.log_out_user/1","type":"function"},{"doc":"A LiveView hook ensuring multiple levels of authentication. The first argument is an atom and can be :ensure_authenticated , :ensure_admin or :ensure_lead .","ref":"PlejadyWeb.UserAuth.html#on_mount/4","title":"PlejadyWeb.UserAuth.on_mount/4","type":"function"},{"doc":"If a user is detected in the conn struct, they are automatically redirected to the app.","ref":"PlejadyWeb.UserAuth.html#redirect_if_user_is_authenticated/1","title":"PlejadyWeb.UserAuth.redirect_if_user_is_authenticated/1","type":"function"},{"doc":"An event management system for a yearly school event.","ref":"readme.html","title":"Overview","type":"extras"},{"doc":"Install Elixir Follow these instructions for configuring the app. Run mix deps.get to install dependencies Run mix phx.server to start a local server! ⚠️ You need to have a PostgreSQL database running on your local machine.","ref":"readme.html#development","title":"Overview - Development","type":"extras"},{"doc":"Before installing dependencies, you need to properly configure the application. This is done by creating a dev.secret.exs file in the config directory of the project. Copy the dev.secret.exs.example file to config/dev.secret.exs Change the values in the file to match your local setup. client_id and client_secret are the OAuth credentials for the Google API. You can get them here . Make sure you select the right project. There are also database credentials. You need to change them to match your local setup. If you're using Docker to host your local database, you can use the default values.","ref":"readme.html#configuring-the-application","title":"Overview - Configuring the application","type":"extras"},{"doc":"You can either deploy to fly.io (easy-ish) or self-host the entire project. If you don't have a server, then go for fly.io or contact Martin Rosenberg (nitram.rosenberg@gmail.com), he will lend you one. Important environment variables When starting the Docker container ( NOT building it), you need to set the following environment variables: DATABASE_URL - The URL to the PostgreSQL database. If you're using fly.io, this is automatically set. GOOGLE_CLIENT_ID - The OAuth client ID for the Google API. GOOGLE_CLIENT_SECRET - The OAuth client secret for the Google API. SECRET_KEY_BASE - A secret key used for signing cookies. You can generate one with mix phx.gen.secret . PHX_HOST - The host of the application. In this case, it will be something like plejady.alej.cz . If you're using fly.io, this is automatically set. Docker To deploy with Docker, use the provided docker-compose.yml to run the app with a separate PostgreSQL database.","ref":"readme.html#deployment","title":"Overview - Deployment","type":"extras"}]