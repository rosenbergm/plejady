searchNodes=[{"doc":"Plejady keeps the contexts that define your domain and business logic. Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"Plejady.html","title":"Plejady","type":"module"},{"doc":"Provides logic for managing accounts. This includes users, guests, admins, etc.","ref":"Plejady.Accounts.html","title":"Plejady.Accounts","type":"module"},{"doc":"Creates a new guest. This is a database action.","ref":"Plejady.Accounts.html#create_guest/1","title":"Plejady.Accounts.create_guest/1","type":"function"},{"doc":"Deletes a suggested admin by its id. This is a database action.","ref":"Plejady.Accounts.html#delete_suggested_admin/1","title":"Plejady.Accounts.delete_suggested_admin/1","type":"function"},{"doc":"Checks if there are any other users registered. If not, this function returns true .","ref":"Plejady.Accounts.html#first_user?/0","title":"Plejady.Accounts.first_user?/0","type":"function"},{"doc":"Fetches all admins.","ref":"Plejady.Accounts.html#get_admins/0","title":"Plejady.Accounts.get_admins/0","type":"function"},{"doc":"Fetches a number of free guest places.","ref":"Plejady.Accounts.html#get_free_guest_places/0","title":"Plejady.Accounts.get_free_guest_places/0","type":"function"},{"doc":"Fetches a user by email.","ref":"Plejady.Accounts.html#get_user_by_email/1","title":"Plejady.Accounts.get_user_by_email/1","type":"function"},{"doc":"Strips off admin rights from the user with the given id. This is a database action.","ref":"Plejady.Accounts.html#strip_off_admin/1","title":"Plejady.Accounts.strip_off_admin/1","type":"function"},{"doc":"Transfers the admin lead role to another user (specified by their email). This is a database action.","ref":"Plejady.Accounts.html#transfer_admin/2","title":"Plejady.Accounts.transfer_admin/2","type":"function"},{"doc":"Provides logic for guest users (users whose email is not a student's email).","ref":"Plejady.Accounts.Guest.html","title":"Plejady.Accounts.Guest","type":"module"},{"doc":"Creates a changeset based on the guest struct and params .","ref":"Plejady.Accounts.Guest.html#new/2","title":"Plejady.Accounts.Guest.new/2","type":"function"},{"doc":"Validates if the given field is not a student's email.","ref":"Plejady.Accounts.Guest.html#validate_if_not_student/2","title":"Plejady.Accounts.Guest.validate_if_not_student/2","type":"function"},{"doc":"Provides logic for suggested admins (users that will automatically become admins).","ref":"Plejady.Accounts.SuggestedAdmin.html","title":"Plejady.Accounts.SuggestedAdmin","type":"module"},{"doc":"Creates a changeset based on the struct and params .","ref":"Plejady.Accounts.SuggestedAdmin.html#changeset/2","title":"Plejady.Accounts.SuggestedAdmin.changeset/2","type":"function"},{"doc":"Creates a new suggested admin and inserts it into the database. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#create/1","title":"Plejady.Accounts.SuggestedAdmin.create/1","type":"function"},{"doc":"Deletes the suggested admin with the given email. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#delete_by_email/1","title":"Plejady.Accounts.SuggestedAdmin.delete_by_email/1","type":"function"},{"doc":"Returns the list of all suggested admins. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#get/0","title":"Plejady.Accounts.SuggestedAdmin.get/0","type":"function"},{"doc":"Returns the suggested admin with the given email. This is a database action.","ref":"Plejady.Accounts.SuggestedAdmin.html#get_by_email/1","title":"Plejady.Accounts.SuggestedAdmin.get_by_email/1","type":"function"},{"doc":"Utilities for managing user tokens.","ref":"Plejady.Accounts.Token.html","title":"Plejady.Accounts.Token","type":"module"},{"doc":"Deletes the session token from the database. This is a database action.","ref":"Plejady.Accounts.Token.html#delete_session_token/1","title":"Plejady.Accounts.Token.delete_session_token/1","type":"function"},{"doc":"Generates a new session token for the given user and inserts it into the database. This is a database action.","ref":"Plejady.Accounts.Token.html#generate_user_session_token/1","title":"Plejady.Accounts.Token.generate_user_session_token/1","type":"function"},{"doc":"Returns the user with the given session token. This is a database action.","ref":"Plejady.Accounts.Token.html#get_user_by_session_token/1","title":"Plejady.Accounts.Token.get_user_by_session_token/1","type":"function"},{"doc":"Provides logic for managing users.","ref":"Plejady.Accounts.User.html","title":"Plejady.Accounts.User","type":"module"},{"doc":"Gives the given user admin rights. This is a database action.","ref":"Plejady.Accounts.User.html#make_user_admin/1","title":"Plejady.Accounts.User.make_user_admin/1","type":"function"},{"doc":"Removes admin rights from the given user. This is a database action.","ref":"Plejady.Accounts.User.html#strip_off_admin/1","title":"Plejady.Accounts.User.strip_off_admin/1","type":"function"},{"doc":"Provides logic for promoting users.","ref":"Plejady.Accounts.User.Promotion.html","title":"Plejady.Accounts.User.Promotion","type":"module"},{"doc":"Creates an empty changeset","ref":"Plejady.Accounts.User.Promotion.html#changeset/0","title":"Plejady.Accounts.User.Promotion.changeset/0","type":"function"},{"doc":"Creates a new changeset based on the promotion struct and params .","ref":"Plejady.Accounts.User.Promotion.html#changeset/2","title":"Plejady.Accounts.User.Promotion.changeset/2","type":"function"},{"doc":"Returns the completed Promotion struct regardless of changeset validity. In our case it doesn't matter if the changeset is valid or not, because we validate the integrity of the data during form validation.","ref":"Plejady.Accounts.User.Promotion.html#create/1","title":"Plejady.Accounts.User.Promotion.create/1","type":"function"},{"doc":"Either promotes the user or creates a new suggested admin. This is a database action.","ref":"Plejady.Accounts.User.Promotion.html#promote/1","title":"Plejady.Accounts.User.Promotion.promote/1","type":"function"},{"doc":"Provides logic for managing user tokens.","ref":"Plejady.Accounts.UserToken.html","title":"Plejady.Accounts.UserToken","type":"module"},{"doc":"Builds a session token bound to the given user.","ref":"Plejady.Accounts.UserToken.html#build_session_token/1","title":"Plejady.Accounts.UserToken.build_session_token/1","type":"function"},{"doc":"Builds a query for the given token and context.","ref":"Plejady.Accounts.UserToken.html#token_and_context_query/2","title":"Plejady.Accounts.UserToken.token_and_context_query/2","type":"function"},{"doc":"Builds a query for the given session token with correct validity checking.","ref":"Plejady.Accounts.UserToken.html#verify_session_token_query/1","title":"Plejady.Accounts.UserToken.verify_session_token_query/1","type":"function"},{"doc":"This module is responsible for initializing the cache with the data from the database. Implements GenServer behaviour.","ref":"Plejady.CacheInitiator.html","title":"Plejady.CacheInitiator","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Plejady.CacheInitiator.html#child_spec/1","title":"Plejady.CacheInitiator.child_spec/1","type":"function"},{"doc":"","ref":"Plejady.CacheInitiator.html#start_link/1","title":"Plejady.CacheInitiator.start_link/1","type":"function"},{"doc":"Provides the core functions to retrieve and manage the CLDR data that supports formatting and localisation. It provides the core functions to access formatted CLDR data, set and retrieve a current locale and validate certain core data types such as locales, currencies and territories.","ref":"Plejady.Cldr.html","title":"Plejady.Cldr","type":"module"},{"doc":"See Cldr.available_locale_name?/1 .","ref":"Plejady.Cldr.html#available_locale_name?/1","title":"Plejady.Cldr.available_locale_name?/1","type":"function"},{"doc":"Returns the default locale . Example iex&gt; Plejady.Cldr . default_locale ( ) % Cldr.LanguageTag { backend : Plejady.Cldr , canonical_locale_name : &quot;en-001&quot; , cldr_locale_name : :&quot;en-001&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en-001&quot; , script : :Latn , territory : :&quot;001&quot; , transform : %{ } , language_variants : [ ] }","ref":"Plejady.Cldr.html#default_locale/0","title":"Plejady.Cldr.default_locale/0","type":"function"},{"doc":"Returns the default territory when a locale does not specify one and none can be inferred. Example iex&gt; Plejady.Cldr . default_territory ( ) :&quot;001&quot;","ref":"Plejady.Cldr.html#default_territory/0","title":"Plejady.Cldr.default_territory/0","type":"function"},{"doc":"Add locale-specific ellipsis to a string. Arguments string is any String.t or a 2-element list of String.t between which the ellipsis is inserted. backend is any module that includes use Cldr and therefore is a Cldr backend module. The default is Cldr.default_backend!/0 . Note that Cldr.default_backend!/0 will raise an exception if no :default_backend is configured under the :ex_cldr key in config.exs . options is a keyword list of options Options :locale is any valid locale name returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale/0 . :location determines where to place the ellipsis. The options are :after (the default for a single string argument), :between (the default and only valid location for an argument that is a list of two strings) and :before . :format formats based upon whether the ellipsis is inserted between words or sentences. The valid options are :word or :sentence . The default is :sentence . Examples iex&gt; Plejady.Cldr . ellipsis &quot;And furthermore&quot; &quot;And furthermore…&quot; iex&gt; Plejady.Cldr . ellipsis [ &quot;And furthermore&quot; , &quot;there is much to be done&quot; ] , locale : :ja &quot;And furthermore…there is much to be done&quot; iex&gt; Plejady.Cldr . ellipsis &quot;And furthermore&quot; , format : :word &quot;And furthermore …&quot; iex&gt; Plejady.Cldr . ellipsis [ &quot;And furthermore&quot; , &quot;there is much to be done&quot; ] , locale : :ja , format : :word &quot;And furthermore … there is much to be done&quot;","ref":"Plejady.Cldr.html#ellipsis/2","title":"Plejady.Cldr.ellipsis/2","type":"function"},{"doc":"Return the current locale to be used for Cldr functions that take an optional locale parameter for which a locale is not supplied. Example iex&gt; Plejady.Cldr . put_locale ( &quot;pl&quot; ) iex&gt; Plejady.Cldr . get_locale % Cldr.LanguageTag { backend : Elixir.Plejady.Cldr , canonical_locale_name : &quot;pl&quot; , cldr_locale_name : :pl , extensions : %{ } , language : &quot;pl&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :pl , territory : :PL , requested_locale_name : &quot;pl&quot; , script : :Latn , transform : %{ } , language_variants : [ ] }","ref":"Plejady.Cldr.html#get_locale/0","title":"Plejady.Cldr.get_locale/0","type":"function"},{"doc":"See Cldr.known_calendars/0 .","ref":"Plejady.Cldr.html#known_calendars/0","title":"Plejady.Cldr.known_calendars/0","type":"function"},{"doc":"See Cldr.known_currencies/0 .","ref":"Plejady.Cldr.html#known_currencies/0","title":"Plejady.Cldr.known_currencies/0","type":"function"},{"doc":"Returns either the Gettext locale_name in Cldr format or false based upon whether the locale name is configured in Gettext . Arguments locale is any valid locale name returned by Plejady.Cldr.known_gettext_locale_names/0 Examples iex&gt; Plejady.Cldr . known_gettext_locale_name &quot;en&quot; &quot;en&quot; iex&gt; Plejady.Cldr . known_gettext_locale_name &quot;en-SA&quot; false","ref":"Plejady.Cldr.html#known_gettext_locale_name/1","title":"Plejady.Cldr.known_gettext_locale_name/1","type":"function"},{"doc":"Returns a boolean indicating if the specified locale name is configured and available in Gettext. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 Examples iex&gt; Plejady.Cldr . known_gettext_locale_name? ( &quot;en&quot; ) true iex&gt; Plejady.Cldr . known_gettext_locale_name? ( &quot;!!&quot; ) false","ref":"Plejady.Cldr.html#known_gettext_locale_name?/1","title":"Plejady.Cldr.known_gettext_locale_name?/1","type":"function"},{"doc":"Returns a list of Gettext locale names but in CLDR format with underscore replaced by hyphen in order to facilitate comparisons with Cldr locale names.","ref":"Plejady.Cldr.html#known_gettext_locale_names/0","title":"Plejady.Cldr.known_gettext_locale_names/0","type":"function"},{"doc":"Returns either the locale_name or false based upon whether the locale name is configured in Cldr . This is helpful when building a list of or expressions to return the first known locale name from a list. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 Examples iex&gt; Plejady.Cldr . known_locale_name :&quot;en-AU&quot; :&quot;en-AU&quot; iex&gt; Plejady.Cldr . known_locale_name :&quot;en-SA&quot; false","ref":"Plejady.Cldr.html#known_locale_name/1","title":"Plejady.Cldr.known_locale_name/1","type":"function"},{"doc":"Returns a boolean indicating if the specified locale name is configured and available in Cldr. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 Examples iex&gt; Plejady.Cldr . known_locale_name? ( :en ) true iex&gt; Plejady.Cldr . known_locale_name? ( :&quot;!!&quot; ) false","ref":"Plejady.Cldr.html#known_locale_name?/1","title":"Plejady.Cldr.known_locale_name?/1","type":"function"},{"doc":"Returns a list of the known locale names. Known locales are those locales which are the subset of all CLDR locales that have been configured for use either in this module or in Gettext .","ref":"Plejady.Cldr.html#known_locale_names/0","title":"Plejady.Cldr.known_locale_names/0","type":"function"},{"doc":"Returns a list of atoms representing the number systems types known to Cldr . Example iex&gt; Plejady.Cldr . known_number_system_types [ :default , :finance , :native , :traditional ]","ref":"Plejady.Cldr.html#known_number_system_types/0","title":"Plejady.Cldr.known_number_system_types/0","type":"function"},{"doc":"See Cldr.known_number_systems/0 .","ref":"Plejady.Cldr.html#known_number_systems/0","title":"Plejady.Cldr.known_number_systems/0","type":"function"},{"doc":"Returns either the RBNF locale_name or false based upon whether the locale name is configured in Cldr and has RBNF rules defined. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 Examples iex&gt; Plejady.Cldr . known_rbnf_locale_name :en :en iex&gt; Plejady.Cldr . known_rbnf_locale_name :&quot;en-SA&quot; false","ref":"Plejady.Cldr.html#known_rbnf_locale_name/1","title":"Plejady.Cldr.known_rbnf_locale_name/1","type":"function"},{"doc":"Returns a boolean indicating if the specified locale name is configured and available in Cldr and supports rules based number formats (RBNF). Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 Examples iex&gt; Plejady.Cldr . known_rbnf_locale_name? ( :en ) true iex&gt; Plejady.Cldr . known_rbnf_locale_name? ( :&quot;!!&quot; ) false","ref":"Plejady.Cldr.html#known_rbnf_locale_name?/1","title":"Plejady.Cldr.known_rbnf_locale_name?/1","type":"function"},{"doc":"Returns a list of locale names which have rules-based number formats (RBNF).","ref":"Plejady.Cldr.html#known_rbnf_locale_names/0","title":"Plejady.Cldr.known_rbnf_locale_names/0","type":"function"},{"doc":"See Cldr.known_territories/0 .","ref":"Plejady.Cldr.html#known_territories/0","title":"Plejady.Cldr.known_territories/0","type":"function"},{"doc":"Normalizes a string by applying transliteration of common symbols in numbers, currencies and dates","ref":"Plejady.Cldr.html#normalize_lenient_parse/3","title":"Plejady.Cldr.normalize_lenient_parse/3","type":"function"},{"doc":"Set the current locale to be used for Cldr functions that take an optional locale parameter for which a locale is not supplied. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a t:Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 See rfc5646 for the specification of a language tag. Examples iex&gt; Plejady.Cldr . put_locale ( &quot;en&quot; ) { :ok , % Cldr.LanguageTag { backend : Plejady.Cldr , canonical_locale_name : &quot;en&quot; , cldr_locale_name : :en , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en&quot; , script : :Latn , territory : :US , transform : %{ } , language_variants : [ ] } } iex&gt; Plejady.Cldr . put_locale ( &quot;invalid-locale!&quot; ) { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; ! \\&quot; starting at position 15&quot; } }","ref":"Plejady.Cldr.html#put_locale/1","title":"Plejady.Cldr.put_locale/1","type":"function"},{"doc":"Add locale-specific quotation marks around a string. Arguments string is any valid Elixir string options is a keyword list of options Options locale is any valid locale name returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale/0 Examples iex&gt; Plejady.Cldr . quote &quot;Quoted String&quot; &quot;“Quoted String”&quot; iex&gt; Plejady.Cldr . quote &quot;Quoted String&quot; , locale : :ja &quot;「Quoted String」&quot;","ref":"Plejady.Cldr.html#quote/2","title":"Plejady.Cldr.quote/2","type":"function"},{"doc":"Returns a list of the locales names that are configured, but not known in CLDR. Since there is a compile-time exception raised if there are any unknown locales this function should always return an empty list.","ref":"Plejady.Cldr.html#unknown_locale_names/0","title":"Plejady.Cldr.unknown_locale_names/0","type":"function"},{"doc":"See Cldr.validate_calendar/1 .","ref":"Plejady.Cldr.html#validate_calendar/1","title":"Plejady.Cldr.validate_calendar/1","type":"function"},{"doc":"See Cldr.validate_currency/1 .","ref":"Plejady.Cldr.html#validate_currency/1","title":"Plejady.Cldr.validate_currency/1","type":"function"},{"doc":"Normalise and validate a locale name. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 Returns {:ok, language_tag} {:error, reason} Notes See rfc5646 for the specification of a language tag. Examples iex&gt; Plejady.Cldr . validate_locale ( :en ) { :ok , % Cldr.LanguageTag { backend : Plejady.Cldr , canonical_locale_name : &quot;en&quot; , cldr_locale_name : :en , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en&quot; , script : :Latn , territory : :US , transform : %{ } , language_variants : [ ] } } iex&gt; Plejady.Cldr . validate_locale Plejady.Cldr . default_locale ( ) { :ok , % Cldr.LanguageTag { backend : Plejady.Cldr , canonical_locale_name : &quot;en-001&quot; , cldr_locale_name : :&quot;en-001&quot; , extensions : %{ } , gettext_locale_name : &quot;en&quot; , language : &quot;en&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :en , requested_locale_name : &quot;en-001&quot; , script : :Latn , territory : :&quot;001&quot; , transform : %{ } , language_variants : [ ] } } iex&gt; Plejady.Cldr . validate_locale ( &quot;zzz&quot; ) { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zzz \\&quot; is invalid&quot; } }","ref":"Plejady.Cldr.html#validate_locale/1","title":"Plejady.Cldr.validate_locale/1","type":"function"},{"doc":"See Cldr.validate_number_system/1 .","ref":"Plejady.Cldr.html#validate_number_system/1","title":"Plejady.Cldr.validate_number_system/1","type":"function"},{"doc":"Normalise and validate a number system type. Arguments number_system_type is any number system type returned by Cldr.known_number_system_types/1 Returns {:ok, normalized_number_system_type} or {:error, {exception, message}} Examples iex&gt; Plejady.Cldr . validate_number_system_type :default { :ok , :default } iex&gt; Plejady.Cldr . validate_number_system_type :traditional { :ok , :traditional } iex&gt; Plejady.Cldr . validate_number_system_type :latn { :error , { Cldr.UnknownNumberSystemTypeError , &quot;The number system type :latn is unknown&quot; } } iex&gt; Plejady.Cldr . validate_number_system_type &quot;bork&quot; { :error , { Cldr.UnknownNumberSystemTypeError , &quot;The number system type \\&quot; bork \\&quot; is invalid&quot; } }","ref":"Plejady.Cldr.html#validate_number_system_type/1","title":"Plejady.Cldr.validate_number_system_type/1","type":"function"},{"doc":"See Cldr.validate_territory/1 .","ref":"Plejady.Cldr.html#validate_territory/1","title":"Plejady.Cldr.validate_territory/1","type":"function"},{"doc":"Execute a function with a locale ensuring that the current locale is restored after the function. Arguments locale is any valid locale name returned by Cldr.known_locale_names/1 . fun is any 0-arity function or function capture. Returns The value returned by the function fun/0 or {:error, {exception, reason}} if the locale is invalid or raises an exception if the current locale cannot be identified.","ref":"Plejady.Cldr.html#with_locale/2","title":"Plejady.Cldr.with_locale/2","type":"function"},{"doc":"Parses HTTP Accept-Language header values as defined in rfc2616 . The Accept-Language request-header field is similar to Accept, but restricts the set of natural languages that are preferred as a response to the request. Language tags function are provided in Cldr.LanguageTag . The format of an Accept-Language header is as follows in ABNF format: Accept - Language = &quot;Accept-Language&quot; &quot;:&quot; 1 #( language-range [ &quot;;&quot; &quot;q&quot; &quot;=&quot; qvalue ] ) language - range = ( ( 1 * 8 ALPHA * ( &quot;-&quot; 1 * 8 ALPHA ) ) | &quot;*&quot; ) Each language-range MAY be given an associated quality value which represents an estimate of the user's preference for the languages specified by that range. The quality value defaults to &quot;q=1&quot;. For example, Accept - Language : da , en - gb ; q = 0.8 , en ; q = 0.7 would mean: &quot;I prefer Danish, but will accept British English and other types of English.&quot;","ref":"Plejady.Cldr.AcceptLanguage.html","title":"Plejady.Cldr.AcceptLanguage","type":"module"},{"doc":"Parse an Accept-Language string and return the best match for a configured Cldr locale. Arguments accept_langauge is a string representing an accept language header Returns {:ok, language_tag} or {:error, reason} Examples iex&gt; Plejady.Cldr.AcceptLanguage . best_match ( &quot;da;q=0.1,zh-TW;q=0.3&quot; , TestBackend.Cldr ) { :ok , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } iex&gt; Plejady.Cldr.AcceptLanguage . best_match ( &quot;da;q=0.1,zh-TW;q=0.3&quot; , TestBackend.Cldr ) { :ok , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } iex&gt; Plejady.Cldr.AcceptLanguage . best_match ( &quot;xx,yy;q=0.3&quot; ) { :error , { Cldr.NoMatchingLocale , &quot;No configured locale could be matched to \\&quot; xx,yy;q=0.3 \\&quot; &quot; } } iex&gt; Plejady.Cldr.AcceptLanguage . best_match ( &quot;invalid_tag&quot; ) { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } }","ref":"Plejady.Cldr.AcceptLanguage.html#best_match/1","title":"Plejady.Cldr.AcceptLanguage.best_match/1","type":"function"},{"doc":"Parses an Accept-Language header value in its string or tokenized form to return a tuple of the form {:ok, [{quality, %Cldr.LanguageTag{}}, ...]} sorted by quality. Arguments accept-language is any string in the format defined by rfc2616 backend is any module that includes use Cldr and therefore is a Cldr backend module Returns {:ok, [{quality, language_tag}, ...]} or {:error, {Cldr.AcceptLanguageError, String.t}} If at least one valid language tag is found but errors are also detected on one more more tags, an {ok, list} tuple is returned wuth an error tuple for each invalid tag added at the end of the list. Example iex&gt; Cldr.AcceptLanguage . parse ( &quot;da,zh-TW;q=0.3&quot; , TestBackend.Cldr ) { :ok , [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } ] } iex&gt; Plejady.Cldr.AcceptLanguage . parse ( &quot;invalid_tag&quot; ) { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } } iex&gt; Plejady.Cldr.AcceptLanguage . parse ( &quot;da,zh-TW;q=0.3,invalid_tag&quot; ) { :ok , [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } , { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } } ] }","ref":"Plejady.Cldr.AcceptLanguage.html#parse/1","title":"Plejady.Cldr.AcceptLanguage.parse/1","type":"function"},{"doc":"Parses an Accept-Language header value in its string or tokenized form to produce a list of tuples of the form [{quality, %Cldr.LanguageTag{}}, ...] sorted by quality in descending order. Arguments accept-language is any string in the format defined by rfc2616 Returns {:ok, [{quality, language_tag}, ...]} or raises a Cldr.AcceptLanguageError exception If at least one valid language tag is found but errors are also detected on one more more tags, an {ok, list} tuple is returned wuth an error tuple for each invalid tag added at the end of the list. Example iex&gt; Plejady.Cldr.AcceptLanguage . parse! ( &quot;da,zh-TW;q=0.3&quot; ) [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } ] Plejady.Cldr.AcceptLanguage . parse! &quot;invalid_tag&quot; ** (Cldr.AcceptLanguageError) &quot;Expected a BCP47 language tag. Could not parse the remaining &quot;g&quot; starting at position 11 (ex_cldr) lib/cldr/accept_language.ex:304: Cldr.AcceptLanguage.parse!/1 iex&gt; Plejady.Cldr.AcceptLanguage . parse! ( &quot;da,zh-TW;q=0.3,invalid_tag&quot; ) [ { 1.0 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;da&quot; , cldr_locale_name : :da , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;da&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :da , requested_locale_name : &quot;da&quot; , script : :Latn , territory : :DK , transform : %{ } , language_variants : [ ] } } , { 0.3 , % Cldr.LanguageTag { backend : TestBackend.Cldr , canonical_locale_name : &quot;zh-TW&quot; , cldr_locale_name : :&quot;zh-Hant&quot; , language_subtags : [ ] , extensions : %{ } , gettext_locale_name : nil , language : &quot;zh&quot; , locale : %{ } , private_use : [ ] , rbnf_locale_name : :&quot;zh-Hant&quot; , requested_locale_name : &quot;zh-TW&quot; , script : :Hant , territory : :TW , transform : %{ } , language_variants : [ ] } } , { :error , { Cldr.LanguageTag.ParseError , &quot;Expected a BCP47 language tag. Could not parse the remaining \\&quot; g \\&quot; starting at position 11&quot; } } ]","ref":"Plejady.Cldr.AcceptLanguage.html#parse!/1","title":"Plejady.Cldr.AcceptLanguage.parse!/1","type":"function"},{"doc":"Data functions to retrieve localised calendar information. Cldr defines formats for several calendars, the names of which are returned by Cldr.known_calendars/0 . Currently this implementation only supports the :gregorian , :persian , :coptic and ethiopic calendars. The :gregorian calendar aligns with the proleptic Gregorian calendar defined by Elixir, Calendar.ISO .","ref":"Plejady.Cldr.Calendar.html","title":"Plejady.Cldr.Calendar","type":"module"},{"doc":"Return the calendar module for a locale. Arguments :locale is any locale or locale name validated by Cldr.validate_locale/2 . The default is Cldr.get_locale() which returns the locale set for the current process Returns {:ok, calendar_module} or {:error, {exception, reason}} Examples iex&gt; Plejady.Cldr.Calendar . calendar_from_locale &quot;en-GB&quot; { :ok , Cldr.Calendar.GB } iex&gt; Plejady.Cldr.Calendar . calendar_from_locale &quot;en-GB-u-ca-gregory&quot; { :ok , Cldr.Calendar.Gregorian } iex&gt; Plejady.Cldr.Calendar . calendar_from_locale &quot;en&quot; { :ok , Cldr.Calendar.US } iex&gt; Plejady.Cldr.Calendar . calendar_from_locale &quot;fa-IR&quot; { :ok , Cldr.Calendar.Persian }","ref":"Plejady.Cldr.Calendar.html#calendar_from_locale/1","title":"Plejady.Cldr.Calendar.calendar_from_locale/1","type":"function"},{"doc":"Returns the calendar module preferred for a territory. Arguments territory is any valid ISO3166-2 code as an String.t or upcased atom() Returns {:ok, calendar_module} or {:error, {exception, reason}} Examples iex&gt; Plejady.Cldr.Calendar . calendar_from_territory :US { :ok , Cldr.Calendar.Gregorian } iex&gt; Plejady.Cldr.Calendar . calendar_from_territory :XX { :error , { Cldr.UnknownTerritoryError , &quot;The territory :XX is unknown&quot; } } Notes The overwhelming majority of territories have :gregorian as their first preferred calendar and therefore Cldr.Calendar.Gregorian will be returned for most territories. Returning any other calendar module would require: That another calendar is preferred over :gregorian for a territory That a calendar module is available to support that calendar. As an example, Iran (territory :IR ) prefers the :persian calendar. If the optional library ex_cldr_calendars_persian is installed, the calendar module Cldr.Calendar.Persian will be returned. If it is not installed, Cldr.Calendar.Gregorian will be returned as :gregorian is the second preference for :IR .","ref":"Plejady.Cldr.Calendar.html#calendar_from_territory/1","title":"Plejady.Cldr.Calendar.calendar_from_territory/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Calendar.html#cyclic_years/2","title":"Plejady.Cldr.Calendar.cyclic_years/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Calendar.html#day_periods/2","title":"Plejady.Cldr.Calendar.day_periods/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Calendar.html#days/2","title":"Plejady.Cldr.Calendar.days/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Calendar.html#eras/2","title":"Plejady.Cldr.Calendar.eras/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Calendar.html#month_patterns/2","title":"Plejady.Cldr.Calendar.month_patterns/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Calendar.html#months/2","title":"Plejady.Cldr.Calendar.months/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Calendar.html#quarters/2","title":"Plejady.Cldr.Calendar.quarters/2","type":"function"},{"doc":"Returns a keyword list of options than can be applied to NimbleStrftime.format/3 . The hex package nimble_strftime provides a format/3 function to format dates, times and datetimes. It takes a set of options that can return day, month and am/pm names. strftime_options! returns a keyword list than can be used as these options to return localised names for days, months and am/pm. Arguments locale is any locale returned by MyApp.Cldr.known_locale_names/0 . The default is MyApp.Cldr.get_locale/0 options is a set of keyword options. The default is [] Options :calendar is the name of any known CLDR calendar. The default is :gregorian . Example iex : MyApp.Cldr.Calendar . strftime_options! [ am_pm_names : # Function &lt; 0.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , month_names : # Function &lt; 1.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , abbreviated_month_names : # Function &lt; 2.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , day_of_week_names : # Function &lt; 3.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; , abbreviated_day_of_week_names : # Function &lt; 4.32021692 / 1 in MyApp.Cldr.Calendar . strftime_options / 2 &gt; ] Typical usage iex : NimbleStrftime . format ( Date . today ( ) , MyApp.Cldr.Calendar . strftime_options! ( ) )","ref":"Plejady.Cldr.Calendar.html#strftime_options!/2","title":"Plejady.Cldr.Calendar.strftime_options!/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Currency.html","title":"Plejady.Cldr.Currency","type":"module"},{"doc":"Returns a map of the metadata for all currencies for a given locale. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_map} or {:error, {exception, reason}} Example MyApp.Cldr.Currency.currencies_for_locale &quot;en&quot; =&gt; {:ok, %{ FJD : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;FJD&quot; , count : %{ one : &quot;Fijian dollar&quot; , other : &quot;Fijian dollars&quot; } , digits : 2 , from : nil , iso_digits : 2 , name : &quot;Fijian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;FJD&quot; , tender : true , to : nil } , SUR : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;SUR&quot; , count : %{ one : &quot;Soviet rouble&quot; , other : &quot;Soviet roubles&quot; } , digits : 2 , from : nil , iso_digits : nil , name : &quot;Soviet Rouble&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;SUR&quot; , tender : true , to : nil } , ... } }","ref":"Plejady.Cldr.Currency.html#currencies_for_locale/3","title":"Plejady.Cldr.Currency.currencies_for_locale/3","type":"function"},{"doc":"Returns a map of the metadata for all currencies for a given locale and raises on error. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_map} or raises an exception Example MyApp.Cldr.Currency.currencies_for_locale! &quot;en&quot; =&gt; %{ FJD : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;FJD&quot; , count : %{ one : &quot;Fijian dollar&quot; , other : &quot;Fijian dollars&quot; } , digits : 2 , from : nil , iso_digits : 2 , name : &quot;Fijian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;FJD&quot; , tender : true , to : nil } , SUR : % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;SUR&quot; , count : %{ one : &quot;Soviet rouble&quot; , other : &quot;Soviet roubles&quot; } , digits : 2 , from : nil , iso_digits : nil , name : &quot;Soviet Rouble&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;SUR&quot; , tender : true , to : nil } , ... }","ref":"Plejady.Cldr.Currency.html#currencies_for_locale!/3","title":"Plejady.Cldr.Currency.currencies_for_locale!/3","type":"function"},{"doc":"Returns the currency metadata for the requested currency code. Arguments currency_or_currency_code is a binary or atom representation of an ISO 4217 currency code, or a %Cldr.Currency{} struct. Options :locale is any valid locale name returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 Returns A {:ok, currency} or {:error, {exception, reason}} Examples iex&gt; Plejady.Cldr.Currency . currency_for_code ( &quot;AUD&quot; ) { :ok , % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;AUD&quot; , count : %{ one : &quot;Australian dollar&quot; , other : &quot;Australian dollars&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Australian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;A$&quot; , tender : true } } iex&gt; Plejady.Cldr.Currency . currency_for_code ( &quot;THB&quot; ) { :ok , % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;THB&quot; , count : %{ one : &quot;Thai baht&quot; , other : &quot;Thai baht&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Thai Baht&quot; , narrow_symbol : &quot;฿&quot; , rounding : 0 , symbol : &quot;THB&quot; , tender : true } }","ref":"Plejady.Cldr.Currency.html#currency_for_code/2","title":"Plejady.Cldr.Currency.currency_for_code/2","type":"function"},{"doc":"Returns the currency metadata for the requested currency code. Arguments currency_or_currency_code is a binary or atom representation of an ISO 4217 currency code, or a %Cldr.Currency{} struct. Options :locale is any valid locale name returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 Returns A t:Cldr.Current.t/0 or raises an exception Examples iex&gt; Plejady.Cldr.Currency . currency_for_code! ( &quot;AUD&quot; ) % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;AUD&quot; , count : %{ one : &quot;Australian dollar&quot; , other : &quot;Australian dollars&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Australian Dollar&quot; , narrow_symbol : &quot;$&quot; , rounding : 0 , symbol : &quot;A$&quot; , tender : true } iex&gt; Plejady.Cldr.Currency . currency_for_code! ( &quot;THB&quot; ) % Cldr.Currency { cash_digits : 2 , cash_rounding : 0 , code : &quot;THB&quot; , count : %{ one : &quot;Thai baht&quot; , other : &quot;Thai baht&quot; } , digits : 2 , iso_digits : 2 , name : &quot;Thai Baht&quot; , narrow_symbol : &quot;฿&quot; , rounding : 0 , symbol : &quot;THB&quot; , tender : true }","ref":"Plejady.Cldr.Currency.html#currency_for_code!/2","title":"Plejady.Cldr.Currency.currency_for_code!/2","type":"function"},{"doc":"Returns the effective currency for a given locale Arguments locale is a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 Returns A ISO 4217 currency code as an upcased atom Examples iex&gt; { :ok , locale } = Plejady.Cldr . validate_locale &quot;en&quot; iex&gt; Plejady.Cldr.Currency . currency_from_locale locale :USD iex&gt; { :ok , locale } = Plejady.Cldr . validate_locale &quot;en-AU&quot; iex&gt; Plejady.Cldr.Currency . currency_from_locale locale :AUD iex&gt; Plejady.Cldr.Currency . currency_from_locale &quot;en-GB&quot; :GBP","ref":"Plejady.Cldr.Currency.html#currency_from_locale/1","title":"Plejady.Cldr.Currency.currency_from_locale/1","type":"function"},{"doc":"Returns a list of historic and the current currency for a given locale. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Example iex&gt; MyApp.Cldr.Currency . currency_history_for_locale &quot;en&quot; { :ok , %{ USD : %{ from : ~D[1792-01-01] , to : nil } , USN : %{ tender : false } , USS : %{ from : nil , tender : false , to : ~D[2014-03-01] } } }","ref":"Plejady.Cldr.Currency.html#currency_history_for_locale/1","title":"Plejady.Cldr.Currency.currency_history_for_locale/1","type":"function"},{"doc":"Returns a map that matches a currency string to a currency code. A currency string is a localised name or symbol representing a currency in a locale-specific manner. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_string_map} or {:error, {exception, reason}} Example MyApp.Cldr.Currency . currency_strings &quot;en&quot; =&gt; { :ok , %{ &quot;mexican silver pesos&quot; =&gt; :MXP , &quot;sudanese dinar&quot; =&gt; :SDD , &quot;bad&quot; =&gt; :BAD , &quot;rsd&quot; =&gt; :RSD , &quot;swazi lilangeni&quot; =&gt; :SZL , &quot;zairean new zaire&quot; =&gt; :ZRN , &quot;guyanaese dollars&quot; =&gt; :GYD , &quot;equatorial guinean ekwele&quot; =&gt; :GQE , ... } }","ref":"Plejady.Cldr.Currency.html#currency_strings/3","title":"Plejady.Cldr.Currency.currency_strings/3","type":"function"},{"doc":"Returns a map that matches a currency string to a currency code or raises an exception. A currency string is a localised name or symbol representing a currency in a locale-specific manner. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 currency_status is :all , :current , :historic , unannotated or :tender ; or a list of one or more status. The default is :all . See Cldr.Currency.currency_filter/2 . Returns {:ok, currency_string_map} or raises an exception Example MyApp.Cldr.Currency . currency_strings! &quot;en&quot; =&gt; %{ &quot;mexican silver pesos&quot; =&gt; :MXP , &quot;sudanese dinar&quot; =&gt; :SDD , &quot;bad&quot; =&gt; :BAD , &quot;rsd&quot; =&gt; :RSD , &quot;swazi lilangeni&quot; =&gt; :SZL , &quot;zairean new zaire&quot; =&gt; :ZRN , &quot;guyanaese dollars&quot; =&gt; :GYD , &quot;equatorial guinean ekwele&quot; =&gt; :GQE , ... }","ref":"Plejady.Cldr.Currency.html#currency_strings!/3","title":"Plejady.Cldr.Currency.currency_strings!/3","type":"function"},{"doc":"Returns the current currency for a given locale. This function does not consider the U extenion parameters cu or rg . It is recommended to us Cldr.Currency.currency_from_locale/1 in most circumstances. Arguments locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Example iex&gt; MyApp.Cldr.Currency . current_currency_from_locale &quot;en&quot; :USD iex&gt; MyApp.Cldr.Currency . current_currency_from_locale &quot;en-AU&quot; :AUD","ref":"Plejady.Cldr.Currency.html#current_currency_from_locale/1","title":"Plejady.Cldr.Currency.current_currency_from_locale/1","type":"function"},{"doc":"Returns a mapping from a territory code to its current currency code. If a territory has no current currency (like Antartica, territory code :AQ ) then no mapping is returned for that territory. Returns A map of {territory_code =&gt; Cldr.Currency.t} Example iex&gt; Plejady.Cldr.Currency . current_territory_currencies ( )","ref":"Plejady.Cldr.Currency.html#current_territory_currencies/0","title":"Plejady.Cldr.Currency.current_territory_currencies/0","type":"function"},{"doc":"See Plejady.Cldr.Currency.known_currency_codes/0 .","ref":"Plejady.Cldr.Currency.html#known_currencies/0","title":"Plejady.Cldr.Currency.known_currencies/0","type":"function"},{"doc":"See Plejady.Cldr.Currency.known_currency_code?/1 .","ref":"Plejady.Cldr.Currency.html#known_currency?/1","title":"Plejady.Cldr.Currency.known_currency?/1","type":"function"},{"doc":"Returns a 2-tuple indicating if the supplied currency code is known. Arguments currency_code is a binary or atom representing an ISO4217 currency code Returns {:ok, currency_code} or {:error, {exception, reason}} Examples iex&gt; Plejady.Cldr.Currency . known_currency_code &quot;AUD&quot; { :ok , :AUD } iex&gt; Plejady.Cldr.Currency . known_currency_code &quot;GGG&quot; { :error , { Cldr.UnknownCurrencyError , &quot;The currency \\&quot; GGG \\&quot; is invalid&quot; } }","ref":"Plejady.Cldr.Currency.html#known_currency_code/1","title":"Plejady.Cldr.Currency.known_currency_code/1","type":"function"},{"doc":"Returns a boolean indicating if the supplied currency code is known. Arguments currency_code is a binary or atom representing an ISO4217 currency code Returns true or false Examples iex&gt; Plejady.Cldr.Currency . known_currency_code? &quot;AUD&quot; true iex&gt; Plejady.Cldr.Currency . known_currency_code? &quot;GGG&quot; false iex&gt; Plejady.Cldr.Currency . known_currency_code? :XCV false","ref":"Plejady.Cldr.Currency.html#known_currency_code?/1","title":"Plejady.Cldr.Currency.known_currency_code?/1","type":"function"},{"doc":"Returns a list of all known currency codes. Example iex&gt; Plejady.Cldr.Currency . known_currency_codes","ref":"Plejady.Cldr.Currency.html#known_currency_codes/0","title":"Plejady.Cldr.Currency.known_currency_codes/0","type":"function"},{"doc":"Returns a Currency struct created from the arguments. Arguments currency is a private use currency code in a format defined by ISO4217 which is X followed by two alphanumeric characters. options is a map of options representing the optional elements of the Cldr.Currency.t struct. Options :name is the name of the currency. Required. :digits is the precision of the currency. Required. :symbol is the currency symbol. Optional. :narrow_symbol is an alternative narrow symbol. Optional. :round_nearest is the rounding precision such as 0.05 . Optional. :alt_code is an alternative currency code for application use. :cash_digits is the precision of the currency when used as cash. Optional. :cash_rounding_nearest is the rounding precision when used as cash such as 0.05 . Optional. Returns {:ok, Cldr.Currency.t} or {:error, {exception, message}} Example iex&gt; Plejady.Cldr.Currency . new ( :XAE , name : &quot;Custom Name&quot; , digits : 0 ) { :ok , % Cldr.Currency { alt_code : :XAE , cash_digits : 0 , cash_rounding : nil , code : :XAE , count : %{ other : &quot;Custom Name&quot; } , digits : 0 , from : nil , iso_digits : 0 , name : &quot;Custom Name&quot; , narrow_symbol : nil , rounding : 0 , symbol : &quot;XAE&quot; , tender : false , to : nil } } iex&gt; MyApp.Cldr.Currency . new ( :XAH , name : &quot;Custom Name&quot; ) { :error , &quot;Required options are missing. Required options are [:name, :digits]&quot; } iex&gt; Plejady.Cldr.Currency . new ( :XAE , name : &quot;XAE&quot; , digits : 0 ) { :error , { Cldr.CurrencyAlreadyDefined , &quot;Currency :XAE is already defined.&quot; } }","ref":"Plejady.Cldr.Currency.html#new/2","title":"Plejady.Cldr.Currency.new/2","type":"function"},{"doc":"Returns the appropriate currency display name for the currency , based on the plural rules in effect for the locale . Arguments number is an integer, float or Decimal currency is any currency returned by Cldr.Currency.known_currencies/0 options is a keyword list of options Options locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 Returns {:ok, plural_string} or {:error, {exception, message}} Examples iex&gt; Plejady.Cldr.Currency . pluralize 1 , :USD { :ok , &quot;US dollar&quot; } iex&gt; Plejady.Cldr.Currency . pluralize 3 , :USD { :ok , &quot;US dollars&quot; } iex&gt; Plejady.Cldr.Currency . pluralize 12 , :USD , locale : &quot;zh&quot; { :ok , &quot;美元&quot; } iex&gt; Plejady.Cldr.Currency . pluralize 12 , :USD , locale : &quot;fr&quot; { :ok , &quot;dollars des États-Unis&quot; } iex&gt; Plejady.Cldr.Currency . pluralize 1 , :USD , locale : &quot;fr&quot; { :ok , &quot;dollar des États-Unis&quot; }","ref":"Plejady.Cldr.Currency.html#pluralize/3","title":"Plejady.Cldr.Currency.pluralize/3","type":"function"},{"doc":"Returns the strings associated with a currency in a given locale. Arguments currency is an ISO4217 currency code locale is any valid locale name returned by MyApp.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by MyApp.Cldr.Locale.new!/1 Returns A list of strings or {:error, {exception, reason}} Example iex&gt; MyApp.Cldr.Currency . strings_for_currency :AUD , &quot;en&quot; [ &quot;a$&quot; , &quot;australian dollars&quot; , &quot;aud&quot; , &quot;australian dollar&quot; ]","ref":"Plejady.Cldr.Currency.html#strings_for_currency/2","title":"Plejady.Cldr.Currency.strings_for_currency/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Date.html","title":"Plejady.Cldr.Date","type":"module"},{"doc":"Formats a date according to a format string as defined in CLDR and described in TR35 Arguments date is a %Date{} struct or any map that contains the keys year , month , day and calendar options is a keyword list of options for formatting. The valid options are: Options format: :short | :medium | :long | :full or a format string. The default is :medium locale: any locale returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale() . number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, formatted_string} or {:error, reason} Examples iex&gt; Plejady.Cldr.Date . to_string ~D[2017-07-10] , format : :medium , locale : &quot;en&quot; { :ok , &quot;Jul 10, 2017&quot; } iex&gt; Plejady.Cldr.Date . to_string ~D[2017-07-10] , locale : &quot;en&quot; { :ok , &quot;Jul 10, 2017&quot; } iex&gt; Plejady.Cldr.Date . to_string ~D[2017-07-10] , format : :full , locale : &quot;en&quot; { :ok , &quot;Monday, July 10, 2017&quot; } iex&gt; Plejady.Cldr.Date . to_string ~D[2017-07-10] , format : :short , locale : &quot;en&quot; { :ok , &quot;7/10/17&quot; } iex&gt; Plejady.Cldr.Date . to_string ~D[2017-07-10] , format : :short , locale : &quot;fr&quot; { :ok , &quot;10/07/2017&quot; } iex&gt; Plejady.Cldr.Date . to_string ~D[2017-07-10] , format : :long , locale : &quot;af&quot; { :ok , &quot;10 Julie 2017&quot; }","ref":"Plejady.Cldr.Date.html#to_string/2","title":"Plejady.Cldr.Date.to_string/2","type":"function"},{"doc":"Formats a date according to a format string as defined in CLDR and described in TR35 Arguments date is a %Date{} struct or any map that contains the keys year , month , day and calendar options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns formatted_date or raises an exception. Examples iex&gt; Plejady.Cldr.Date . to_string! ~D[2017-07-10] , format : :medium , locale : &quot;en&quot; &quot;Jul 10, 2017&quot; iex&gt; Plejady.Cldr.Date . to_string! ~D[2017-07-10] , locale : &quot;en&quot; &quot;Jul 10, 2017&quot; iex&gt; Plejady.Cldr.Date . to_string! ~D[2017-07-10] , format : :full , locale : &quot;en&quot; &quot;Monday, July 10, 2017&quot; iex&gt; Plejady.Cldr.Date . to_string! ~D[2017-07-10] , format : :short , locale : &quot;en&quot; &quot;7/10/17&quot; iex&gt; Plejady.Cldr.Date . to_string! ~D[2017-07-10] , format : :short , locale : &quot;fr&quot; &quot;10/07/2017&quot; iex&gt; Plejady.Cldr.Date . to_string! ~D[2017-07-10] , format : :long , locale : &quot;af&quot; &quot;10 Julie 2017&quot;","ref":"Plejady.Cldr.Date.html#to_string!/2","title":"Plejady.Cldr.Date.to_string!/2","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Plejady.Cldr.Date.Interval.to_string/3 and Plejady.Cldr.Interval.to_string/3","ref":"Plejady.Cldr.Date.Interval.html","title":"Plejady.Cldr.Date.Interval","type":"module"},{"doc":"","ref":"Plejady.Cldr.Date.Interval.html#do_to_string!/3","title":"Plejady.Cldr.Date.Interval.do_to_string!/3","type":"function"},{"doc":"Returns a interval formed from two dates as a localised string. Arguments from is any map that conforms to the Calendar.date type. to is any map that conforms to the Calendar.date type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone date. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; Plejady.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-12-31] { :ok , &quot;Jan 1 – Dec 31, 2020&quot; } iex&gt; Plejady.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] { :ok , &quot;Jan 1 – 12, 2020&quot; } iex&gt; Plejady.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Plejady.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month { :ok , &quot;January – December 2020&quot; } iex&gt; Plejady.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :short { :ok , &quot;1/1/2020 – 1/12/2020&quot; } iex&gt; Plejady.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long , locale : &quot;fr&quot; { :ok , &quot;mer. 1 – dim. 12 janv. 2020&quot; } iex&gt; Plejady.Cldr.Date.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long , locale : &quot;th&quot; , number_system : :thai { :ok , &quot;พ. ๑ ม.ค. – อา. ๑๒ ม.ค. ๒๐๒๐&quot; }","ref":"Plejady.Cldr.Date.Interval.html#to_string/3","title":"Plejady.Cldr.Date.Interval.to_string/3","type":"function"},{"doc":"Returns a interval formed from two dates as a localised string. Arguments from is any map that conforms to the Calendar.date type. to is any map that conforms to the Calendar.date type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone date. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; Plejady.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; Plejady.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) &quot;Jan 1 – 12, 2020&quot; iex&gt; Plejady.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Plejady.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-01] ) , ...&gt; format : :long , style : :year_and_month &quot;January – December 2020&quot; iex&gt; use CalendarInterval iex&gt; Plejady.Cldr.Date.Interval . to_string! ~I&quot;2020-01/12&quot; &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; Plejady.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :short &quot;1/1/2020 – 1/12/2020&quot; iex&gt; Plejady.Cldr.Date.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-01-12] ) , ...&gt; format : :long , locale : &quot;fr&quot; &quot;mer. 1 – dim. 12 janv. 2020&quot;","ref":"Plejady.Cldr.Date.Interval.html#to_string!/3","title":"Plejady.Cldr.Date.Interval.to_string!/3","type":"function"},{"doc":"","ref":"Plejady.Cldr.DateTime.html","title":"Plejady.Cldr.DateTime","type":"module"},{"doc":"Formats a DateTime according to a format string as defined in CLDR and described in TR35 Arguments datetime is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys :year , :month , :day , :calendar . :hour , :minute and :second with optional :microsecond . options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string or any of the keys returned by Cldr.DateTime.available_format_names . The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; for example, the locale era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns {:ok, formatted_datetime} or {:error, reason} Examples iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Plejady.Cldr.DateTime . to_string datetime { :ok , &quot;Jan 1, 2000, 11:59:59 PM&quot; } iex&gt; Plejady.Cldr.DateTime . to_string datetime , locale : &quot;en&quot; { :ok , &quot;Jan 1, 2000, 11:59:59 PM&quot; } iex&gt; Plejady.Cldr.DateTime . to_string datetime , format : :long , locale : &quot;en&quot; { :ok , &quot;January 1, 2000, 11:59:59 PM UTC&quot; } iex&gt; Plejady.Cldr.DateTime . to_string datetime , format : :hms , locale : &quot;en&quot; { :ok , &quot;11:59:59 PM&quot; } iex&gt; Plejady.Cldr.DateTime . to_string datetime , format : :full , locale : &quot;en&quot; { :ok , &quot;Saturday, January 1, 2000, 11:59:59 PM GMT&quot; } iex&gt; Plejady.Cldr.DateTime . to_string datetime , format : :full , locale : &quot;fr&quot; { :ok , &quot;samedi 1 janvier 2000, 23:59:59 UTC&quot; }","ref":"Plejady.Cldr.DateTime.html#to_string/2","title":"Plejady.Cldr.DateTime.to_string/2","type":"function"},{"doc":"Formats a DateTime according to a format string as defined in CLDR and described in TR35 returning a formatted string or raising on error. Arguments datetime is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys :year , :month , :day , :calendar . :hour , :minute and :second with optional :microsecond . options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string or any of the keys returned by Cldr.DateTime.available_format_names or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; for example, the locale era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns formatted_datetime or raises an exception Examples iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Plejady.Cldr.DateTime . to_string! datetime , locale : &quot;en&quot; &quot;Jan 1, 2000, 11:59:59 PM&quot; iex&gt; Plejady.Cldr.DateTime . to_string! datetime , format : :long , locale : &quot;en&quot; &quot;January 1, 2000, 11:59:59 PM UTC&quot; iex&gt; Plejady.Cldr.DateTime . to_string! datetime , format : :full , locale : &quot;en&quot; &quot;Saturday, January 1, 2000, 11:59:59 PM GMT&quot; iex&gt; Plejady.Cldr.DateTime . to_string! datetime , format : :full , locale : &quot;fr&quot; &quot;samedi 1 janvier 2000, 23:59:59 UTC&quot;","ref":"Plejady.Cldr.DateTime.html#to_string!/2","title":"Plejady.Cldr.DateTime.to_string!/2","type":"function"},{"doc":"Manages the Date, TIme and DateTime formats defined by CLDR. The functions in Cldr.DateTime.Format are primarily concerned with encapsulating the data from CLDR in functions that are used during the formatting process.","ref":"Plejady.Cldr.DateTime.Format.html","title":"Plejady.Cldr.DateTime.Format","type":"module"},{"doc":"Returns a list of calendars defined for a given locale. Arguments locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 Example iex&gt; Plejady.Cldr.DateTime.Format . calendars_for &quot;en&quot; { :ok , [ :buddhist , :chinese , :coptic , :dangi , :ethiopic , :ethiopic_amete_alem , :generic , :gregorian , :hebrew , :indian , :islamic , :islamic_civil , :islamic_rgsa , :islamic_tbla , :islamic_umalqura , :japanese , :persian , :roc ] }","ref":"Plejady.Cldr.DateTime.Format.html#calendars_for/1","title":"Plejady.Cldr.DateTime.Format.calendars_for/1","type":"function"},{"doc":"Returns a map of the standard date formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Plejady.Cldr.DateTime.Format . date_formats &quot;en&quot; { :ok , % Cldr.Date.Styles { full : &quot;EEEE, MMMM d, y&quot; , long : &quot;MMMM d, y&quot; , medium : &quot;MMM d, y&quot; , short : &quot;M/d/yy&quot; } } iex&gt; Plejady.Cldr.DateTime.Format . date_formats &quot;en&quot; , :buddhist { :ok , % Cldr.Date.Styles { full : &quot;EEEE, MMMM d, y G&quot; , long : &quot;MMMM d, y G&quot; , medium : &quot;MMM d, y G&quot; , short : &quot;M/d/y GGGGG&quot; } }","ref":"Plejady.Cldr.DateTime.Format.html#date_formats/2","title":"Plejady.Cldr.DateTime.Format.date_formats/2","type":"function"},{"doc":"Returns a map of the available non-standard datetime formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t() calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Plejady.Cldr.DateTime.Format . date_time_available_formats &quot;en&quot; { :ok , %{ d : &quot;d&quot; , h : &quot;h a&quot; , hm : &quot;h:mm a&quot; , hms : &quot;h:mm:ss a&quot; , hmsv : &quot;h:mm:ss a v&quot; , hmv : &quot;h:mm a v&quot; , ms : &quot;mm:ss&quot; , y : &quot;y&quot; , yw : %{ one : &quot;&#39;week&#39; w &#39;of&#39; Y&quot; , other : &quot;&#39;week&#39; w &#39;of&#39; Y&quot; } , Bh : &quot;h B&quot; , Bhm : &quot;h:mm B&quot; , Bhms : &quot;h:mm:ss B&quot; , E : &quot;ccc&quot; , EBhm : &quot;E h:mm B&quot; , EBhms : &quot;E h:mm:ss B&quot; , EHm : &quot;E HH:mm&quot; , EHms : &quot;E HH:mm:ss&quot; , Ed : &quot;d E&quot; , Ehm : &quot;E h:mm a&quot; , Ehms : &quot;E h:mm:ss a&quot; , Gy : &quot;y G&quot; , GyMMM : &quot;MMM y G&quot; , GyMMMEd : &quot;E, MMM d, y G&quot; , GyMMMd : &quot;MMM d, y G&quot; , GyMd : &quot;M/d/y G&quot; , H : &quot;HH&quot; , Hm : &quot;HH:mm&quot; , Hms : &quot;HH:mm:ss&quot; , Hmsv : &quot;HH:mm:ss v&quot; , Hmv : &quot;HH:mm v&quot; , M : &quot;L&quot; , MEd : &quot;E, M/d&quot; , MMM : &quot;LLL&quot; , MMMEd : &quot;E, MMM d&quot; , MMMMW : %{ one : &quot;&#39;week&#39; W &#39;of&#39; MMMM&quot; , other : &quot;&#39;week&#39; W &#39;of&#39; MMMM&quot; } , MMMMd : &quot;MMMM d&quot; , MMMd : &quot;MMM d&quot; , Md : &quot;M/d&quot; , yM : &quot;M/y&quot; , yMEd : &quot;E, M/d/y&quot; , yMMM : &quot;MMM y&quot; , yMMMEd : &quot;E, MMM d, y&quot; , yMMMM : &quot;MMMM y&quot; , yMMMd : &quot;MMM d, y&quot; , yMd : &quot;M/d/y&quot; , yQQQ : &quot;QQQ y&quot; , yQQQQ : &quot;QQQQ y&quot; } }","ref":"Plejady.Cldr.DateTime.Format.html#date_time_available_formats/2","title":"Plejady.Cldr.DateTime.Format.date_time_available_formats/2","type":"function"},{"doc":"Returns a map of the standard datetime formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Plejady.Cldr.DateTime.Format . date_time_formats &quot;en&quot; { :ok , % Cldr.DateTime.Styles { full : &quot;{1}, {0}&quot; , long : &quot;{1}, {0}&quot; , medium : &quot;{1}, {0}&quot; , short : &quot;{1}, {0}&quot; } } iex&gt; Plejady.Cldr.DateTime.Format . date_time_formats &quot;en&quot; , :buddhist { :ok , % Cldr.DateTime.Styles { full : &quot;{1}, {0}&quot; , long : &quot;{1}, {0}&quot; , medium : &quot;{1}, {0}&quot; , short : &quot;{1}, {0}&quot; } }","ref":"Plejady.Cldr.DateTime.Format.html#date_time_formats/2","title":"Plejady.Cldr.DateTime.Format.date_time_formats/2","type":"function"},{"doc":"Returns the fallback format for a given locale and calendar type Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t() calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Plejady.Cldr.DateTime.Format . date_time_interval_fallback &quot;en&quot; , :gregorian [ 0 , &quot; – &quot; , 1 ]","ref":"Plejady.Cldr.DateTime.Format.html#date_time_interval_fallback/2","title":"Plejady.Cldr.DateTime.Format.date_time_interval_fallback/2","type":"function"},{"doc":"Returns a map of the interval formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag.t/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples:","ref":"Plejady.Cldr.DateTime.Format.html#date_time_interval_formats/2","title":"Plejady.Cldr.DateTime.Format.date_time_interval_formats/2","type":"function"},{"doc":"Returns the time period for a given time of day. Arguments time is any Time.t or a map with at least :hour , :minute and :second keys language is a binary representation of a valid and configured language in Cldr The time period is a locale-specific key that is used to localise a time into a textual representation of &quot;am&quot;, &quot;pm&quot;, &quot;noon&quot;, &quot;midnight&quot;, &quot;evening&quot;, &quot;morning&quot; and so on as defined in the CLDR day period rules. Examples iex&gt; Plejady.Cldr.DateTime.Format . day_period_for ~T[06:05:54.515228] , &quot;en&quot; :morning1 iex&gt; Plejady.Cldr.DateTime.Format . day_period_for ~T[13:05:54.515228] , &quot;en&quot; :afternoon1 iex&gt; Plejady.Cldr.DateTime.Format . day_period_for ~T[21:05:54.515228] , &quot;en&quot; :night1 iex&gt; Plejady.Cldr.DateTime.Format . day_period_for ~T[21:05:54.515228] , &quot;fr&quot; :evening1","ref":"Plejady.Cldr.DateTime.Format.html#day_period_for/2","title":"Plejady.Cldr.DateTime.Format.day_period_for/2","type":"function"},{"doc":"Returns the GMT offset format list for a for a timezone offset for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Plejady.Cldr.DateTime.Format . gmt_format &quot;en&quot; { :ok , [ &quot;GMT&quot; , 0 ] }","ref":"Plejady.Cldr.DateTime.Format.html#gmt_format/1","title":"Plejady.Cldr.DateTime.Format.gmt_format/1","type":"function"},{"doc":"Returns the GMT format string for a for a timezone with an offset of zero for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Plejady.Cldr.DateTime.Format . gmt_zero_format :en { :ok , &quot;GMT&quot; } iex&gt; Plejady.Cldr.DateTime.Format . gmt_zero_format &quot;fr&quot; { :ok , &quot;UTC&quot; }","ref":"Plejady.Cldr.DateTime.Format.html#gmt_zero_format/1","title":"Plejady.Cldr.DateTime.Format.gmt_zero_format/1","type":"function"},{"doc":"Returns the positive and negative hour format for a timezone offset for a given locale. Arguments locale is any locale returned by Cldr.known_locale_names/0 Example iex&gt; Plejady.Cldr.DateTime.Format . hour_format &quot;en&quot; { :ok , { &quot;+HH:mm&quot; , &quot;-HH:mm&quot; } }","ref":"Plejady.Cldr.DateTime.Format.html#hour_format/1","title":"Plejady.Cldr.DateTime.Format.hour_format/1","type":"function"},{"doc":"Returns a boolean indicating is a given language defines the notion of &quot;noon&quot; and &quot;midnight&quot; Arguments language is a binary representation of a valid and configured language in Cldr Examples iex&gt; Plejady.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;fr&quot; true iex&gt; Plejady.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;en&quot; true iex&gt; Plejady.Cldr.DateTime.Format . language_has_noon_and_midnight? &quot;af&quot; false","ref":"Plejady.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1","title":"Plejady.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","type":"function"},{"doc":"Returns a map of the standard time formats for a given locale and calendar. Arguments locale is any locale returned by Cldr.known_locale_names/0 calendar is any calendar returned by Cldr.DateTime.Format.calendars_for/1 The default is :gregorian Examples: iex&gt; Plejady.Cldr.DateTime.Format . time_formats &quot;en&quot; { :ok , % Cldr.Time.Styles { full : &quot;h:mm:ss a zzzz&quot; , long : &quot;h:mm:ss a z&quot; , medium : &quot;h:mm:ss a&quot; , short : &quot;h:mm a&quot; } } iex&gt; Plejady.Cldr.DateTime.Format . time_formats &quot;en&quot; , :buddhist { :ok , % Cldr.Time.Styles { full : &quot;h:mm:ss a zzzz&quot; , long : &quot;h:mm:ss a z&quot; , medium : &quot;h:mm:ss a&quot; , short : &quot;h:mm a&quot; } }","ref":"Plejady.Cldr.DateTime.Format.html#time_formats/2","title":"Plejady.Cldr.DateTime.Format.time_formats/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.DateTime.Format.html#t:calendar/0","title":"Plejady.Cldr.DateTime.Format.calendar/0","type":"type"},{"doc":"","ref":"Plejady.Cldr.DateTime.Format.html#t:formats/0","title":"Plejady.Cldr.DateTime.Format.formats/0","type":"type"},{"doc":"Implements the compilation and execution of date, time and datetime formats.","ref":"Plejady.Cldr.DateTime.Formatter.html","title":"Plejady.Cldr.DateTime.Formatter","type":"module"},{"doc":"Returns the formatted and localised date, time or datetime for a given Date , Time , DateTime or struct with the appropriate fields. Arguments date is a Date , Time , DateTime or other struct that contains the required date and time fields. format is a valid format string, for example yy/MM/dd hh:MM locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 options is a keyword list of options. The valid options are: Options :number_system . The resulting formatted and localised date/time string will be transliterated into this number system. Number system is anything returned from Plejady.Cldr.Number.System.number_systems_for/1 NOTE This function is called by Cldr.Date.to_string/2 , Cldr.Time.to_string/2 and Cldr.DateTime.to_string/2 which is the preferred API. Examples iex&gt; Plejady.Cldr.DateTime.Formatter . format ~U[2017-09-03 10:23:00.0Z] , &quot;yy/MM/dd hh:MM&quot; , &quot;en&quot; { :ok , &quot;17/09/03 10:09&quot; }","ref":"Plejady.Cldr.DateTime.Formatter.html#format/4","title":"Plejady.Cldr.DateTime.Formatter.format/4","type":"function"},{"doc":"","ref":"Plejady.Cldr.DateTime.Formatter.html#gmt_tz_format/3","title":"Plejady.Cldr.DateTime.Formatter.gmt_tz_format/3","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Cldr.Interval.to_string/3 and Cldr.DateTime.Interval.to_string/3","ref":"Plejady.Cldr.DateTime.Interval.html","title":"Plejady.Cldr.DateTime.Interval","type":"module"},{"doc":"","ref":"Plejady.Cldr.DateTime.Interval.html#do_to_string/3","title":"Plejady.Cldr.DateTime.Interval.do_to_string/3","type":"function"},{"doc":"","ref":"Plejady.Cldr.DateTime.Interval.html#do_to_string!/3","title":"Plejady.Cldr.DateTime.Interval.do_to_string!/3","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two dates. Arguments from is any map that conforms to the Calendar.datetime type. to is any map that conforms to the Calendar.datetime type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone datetime. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval Examples iex&gt; Plejady.Cldr.DateTime.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ...&gt; ~U[2020-12-31 10:00:00.0Z] { :ok , &quot;Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM&quot; } iex&gt; Plejady.Cldr.DateTime.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , nil { :ok , &quot;Jan 1, 2020, 12:00:00 AM –&quot; }","ref":"Plejady.Cldr.DateTime.Interval.html#to_string/3","title":"Plejady.Cldr.DateTime.Interval.to_string/3","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two dates or raises an exception. Arguments from is any map that conforms to the Calendar.datetime type. to is any map that conforms to the Calendar.datetime type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone datetime. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes For more information on interval format string see the Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date is formatted instead of an interval. Examples iex&gt; Plejady.Cldr.DateTime.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ...&gt; ~U[2020-12-31 10:00:00.0Z] &quot;Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM&quot;","ref":"Plejady.Cldr.DateTime.Interval.html#to_string!/3","title":"Plejady.Cldr.DateTime.Interval.to_string!/3","type":"function"},{"doc":"","ref":"Plejady.Cldr.DateTime.Relative.html","title":"Plejady.Cldr.DateTime.Relative","type":"module"},{"doc":"Returns a {:ok, string} representing a relative time (ago, in) for a given number, Date or Datetime. Returns {:error, reason} when errors are detected. relative is a number or Date/Datetime representing the time distance from now or from options[:relative_to] options is a Keyword list of options which are: Options :locale is the locale in which the binary is formatted. The default is Cldr.get_locale/0 :style is the style of the binary. Style may be :default , :narrow or :short :unit is the time unit for the formatting. The allowable units are :second , :minute , :hour , :day , :week , :month , :year , :mon , :tue , :wed , :thu , :fri , :sat , :sun , :quarter :relative_to is the baseline Date or Datetime from which the difference from relative is calculated when relative is a Date or a DateTime. The default for a Date is Date.utc_today , for a DateTime it is DateTime.utc_now Notes When options[:unit] is not specified, MyApp.Cldr.DateTime.Relative.to_string/2 attempts to identify the appropriate unit based upon the magnitude of relative . For example, given a parameter of less than 60 , then to_string/2 will assume :seconds as the unit. See unit_from_relative_time/1 . Examples iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( - 1 ) { :ok , &quot;1 second ago&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 1 ) { :ok , &quot;in 1 second&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 1 , unit : :day ) { :ok , &quot;tomorrow&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 1 , unit : :day , locale : &quot;fr&quot; ) { :ok , &quot;demain&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 1 , unit : :day , style : :narrow ) { :ok , &quot;tomorrow&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 1234 , unit : :year ) { :ok , &quot;in 1,234 years&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 1234 , unit : :year , locale : &quot;fr&quot; ) { :ok , &quot;dans 1 234 ans&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 31 ) { :ok , &quot;in 31 seconds&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( ~D[2017-04-29] , relative_to : ~D[2017-04-26] ) { :ok , &quot;in 3 days&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 310 , style : :short , locale : &quot;fr&quot; ) { :ok , &quot;dans 5 min&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( 310 , style : :narrow , locale : &quot;fr&quot; ) { :ok , &quot;+5 min&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string 2 , unit : :wed , style : :short , locale : &quot;en&quot; { :ok , &quot;in 2 Wed.&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string 1 , unit : :wed , style : :short { :ok , &quot;next Wed.&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string - 1 , unit : :wed , style : :short { :ok , &quot;last Wed.&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string - 1 , unit : :wed { :ok , &quot;last Wednesday&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string - 1 , unit : :quarter { :ok , &quot;last quarter&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string - 1 , unit : :mon , locale : &quot;fr&quot; { :ok , &quot;lundi dernier&quot; } iex&gt; Plejady.Cldr.DateTime.Relative . to_string ( ~D[2017-04-29] , unit : :ziggeraut ) { :error , { Cldr.UnknownTimeUnit , &quot;Unknown time unit :ziggeraut. Valid time units are [:day, :hour, :minute, :month, :second, :week, :year, :mon, :tue, :wed, :thu, :fri, :sat, :sun, :quarter]&quot; } }","ref":"Plejady.Cldr.DateTime.Relative.html#to_string/2","title":"Plejady.Cldr.DateTime.Relative.to_string/2","type":"function"},{"doc":"Returns a {:ok, string} representing a relative time (ago, in) for a given number, Date or Datetime or raises an exception on error. Arguments relative is a number or Date/Datetime representing the time distance from now or from options[:relative_to]. options is a Keyword list of options. Options :locale is the locale in which the binary is formatted. The default is Cldr.get_locale/0 :style is the format of the binary. Style may be :default , :narrow or :short . The default is :default :unit is the time unit for the formatting. The allowable units are :second , :minute , :hour , :day , :week , :month , :year , :mon , :tue , :wed , :thu , :fri , :sat , :sun , :quarter :relative_to is the baseline Date or Datetime from which the difference from relative is calculated when relative is a Date or a DateTime. The default for a Date is Date.utc_today , for a DateTime it is DateTime.utc_now See to_string/2","ref":"Plejady.Cldr.DateTime.Relative.html#to_string!/2","title":"Plejady.Cldr.DateTime.Relative.to_string!/2","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. The interval functions in this library will determine the calendar field with the greatest difference between the two datetimes before using the format pattern. For example, the greatest difference in &quot;Jan 10-12, 2008&quot; is the day field, while the greatest difference in &quot;Jan 10 - Feb 12, 2008&quot; is the month field. This is used to pick the exact pattern to be used. See Cldr.Interval for further detail.","ref":"Plejady.Cldr.Interval.html","title":"Plejady.Cldr.Interval","type":"module"},{"doc":"Returns a Date.Range or CalendarInterval as a localised string. Arguments range is either a Date.Range.t returned from Date.range/2 or a CalendarInterval.t options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If a style is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time For a datetime there are no style options, the default for each of the date and time part is used locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes to_string/2 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; use CalendarInterval iex&gt; Plejady.Cldr.Interval . to_string ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Plejady.Cldr.Interval . to_string Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Thu, Dec 31, 2020&quot; }","ref":"Plejady.Cldr.Interval.html#to_string/2","title":"Plejady.Cldr.Interval.to_string/2","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two dates. Arguments from is any map that conforms to the any one of the Calendar types. to is any map that conforms to the any one of the Calendar types. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If styling is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time For a datetime there are no style options, the default for each of the date and time part is used locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes to_string/2 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; Plejady.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-12-31] { :ok , &quot;Jan 1 – Dec 31, 2020&quot; } iex&gt; Plejady.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] { :ok , &quot;Jan 1 – 12, 2020&quot; } iex&gt; Plejady.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Plejady.Cldr.Interval . to_string ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month { :ok , &quot;January – December 2020&quot; } iex&gt; use CalendarInterval iex&gt; Plejady.Cldr.Interval . to_string ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long { :ok , &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; } iex&gt; Plejady.Cldr.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-12-01 10:05:00.0Z] , ...&gt; format : :long { :ok , &quot;January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC&quot; } iex&gt; Plejady.Cldr.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:05:00.0Z] , ...&gt; format : :long { :ok , &quot;January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC&quot; }","ref":"Plejady.Cldr.Interval.html#to_string/3","title":"Plejady.Cldr.Interval.to_string/3","type":"function"},{"doc":"Returns a Date.Range or CalendarInterval as a localised string or raises an exception. Arguments range is either a Date.Range.t returned from Date.range/2 or a CalendarInterval.t options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If a style is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time . For a datetime there are no style options, the default for each of the date and time part is used. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises an exception Notes to_string/3 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Otherwise it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; use CalendarInterval iex&gt; Plejady.Cldr.Interval . to_string! ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Plejady.Cldr.Interval . to_string! Date . range ( ~D[2020-01-01] , ~D[2020-12-31] ) , ...&gt; format : :long &quot;Wed, Jan 1 – Thu, Dec 31, 2020&quot;","ref":"Plejady.Cldr.Interval.html#to_string!/2","title":"Plejady.Cldr.Interval.to_string!/2","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two date or raises an exception. Arguments from is any map that conforms to the any one of the Calendar types. to is any map that conforms to the any one of the Calendar types. to must occur on or after from . options is a keyword list of options. The default is [] . Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The valid styles depends on whether formatting is for a date, time or datetime. Since the functions in this module will make a determination as to which formatter to be used based upon the data passed to them it is recommended the style option be omitted. If styling is important then call to_string/3 directly on Cldr.Date.Interval , Cldr.Time.Interval or Cldr.DateTime.Interval . For a date the alternatives are :date , :month_and_day , :month and :year_and_month . The default is :date . For a time the alternatives are :time , :zone and :flex . The default is :time . For a datetime there are no style options, the default for each of the date and time part is used. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 . number_system: a number system into which the formatted date digits should be transliterated. Returns string or raises and exception Notes to_string/3 will decide which formatter to call based upon the arguments provided to it. A Date.Range.t will call Cldr.Date.Interval.to_string/3 A CalendarInterval will call Cldr.Date.Interval.to_string/3 if its :precision is :year , :month or :day . Othersie it will call Cldr.Time.Interval.to_string/3 If from and to both conform to the Calendar.datetime() type then Cldr.DateTime.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.date() type then Cldr.Date.Interval.to_string/3 is called Otherwise if from and to conform to the Calendar.time() type then Cldr.Time.Interval.to_string/3 is called CalendarInterval support requires adding the dependency calendar_interval to the deps configuration in mix.exs . For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configuration locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single date, time or datetime is formatted instead of an interval Examples iex&gt; Plejady.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-12-31] &quot;Jan 1 – Dec 31, 2020&quot; iex&gt; Plejady.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-01-12] &quot;Jan 1 – 12, 2020&quot; iex&gt; Plejady.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-01-12] , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Plejady.Cldr.Interval . to_string! ~D[2020-01-01] , ~D[2020-12-01] , ...&gt; format : :long , style : :year_and_month &quot;January – December 2020&quot; iex&gt; use CalendarInterval iex&gt; Plejady.Cldr.Interval . to_string! ~I&quot;2020-01-01/12&quot; , ...&gt; format : :long &quot;Wed, Jan 1 – Sun, Jan 12, 2020&quot; iex&gt; Plejady.Cldr.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-12-01 10:05:00.0Z] , ...&gt; format : :long &quot;January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC&quot; iex&gt; Plejady.Cldr.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:05:00.0Z] , ...&gt; format : :long &quot;January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC&quot;","ref":"Plejady.Cldr.Interval.html#to_string!/3","title":"Plejady.Cldr.Interval.to_string!/3","type":"function"},{"doc":"Backend module that provides functions to define new locales and display human-readable locale names for presentation purposes.","ref":"Plejady.Cldr.Locale.html","title":"Plejady.Cldr.Locale","type":"module"},{"doc":"Returns the list of fallback locale names, starting with the provided locale name. Fallbacks are a list of locate names which can be used to resolve translation or other localization data if such localised data does not exist for this specific locale. After locale-specific fallbacks are determined, the the default locale and its fallbacks are added to the chain. Arguments locale_name is any locale name returned by Plejady.Cldr.known_locale_names/0 Returns {:ok, list_of_locale_names} or {:error, {exception, reason}} Examples In these examples the default locale is :&quot;en-001&quot; . iex&gt; Plejady.Cldr.Locale . fallback_locale_names ( :&quot;fr-CA&quot; ) { :ok , [ :&quot;fr-CA&quot; , :fr , :&quot;en-001&quot; , :en ] } # Fallbacks are typically formed by progressively # stripping variant, territory and script from the # given locale name. But not always - there are # certain fallbacks that take a different path. iex&gt; Plejady.Cldr.Locale . fallback_locale_names ( :nb ) { :ok , [ :nb , :no , :&quot;en-001&quot; , :en ] }","ref":"Plejady.Cldr.Locale.html#fallback_locale_names/1","title":"Plejady.Cldr.Locale.fallback_locale_names/1","type":"function"},{"doc":"Returns the list of fallback locales, starting with the provided locale name. Fallbacks are a list of locate names which can be used to resolve translation or other localization data if such localised data does not exist for this specific locale. After locale-specific fallbacks are determined, the the default locale and its fallbacks are added to the chain. Arguments locale_name is any locale name returned by Plejady.Cldr.known_locale_names/0 Returns {:ok, list_of_locales} or {:error, {exception, reason}} Examples In these examples the default locale is :&quot;en-001&quot; . Plejady.Cldr.Locale . fallback_locales ( :&quot;fr-CA&quot; ) =&gt; { :ok , [ # Cldr.LanguageTag &lt; fr - CA [ validated ] &gt; , # Cldr.LanguageTag &lt; fr [ validated ] &gt; , # Cldr.LanguageTag &lt; en [ validated ] &gt; ] } # Fallbacks are typically formed by progressively # stripping variant, territory and script from the # given locale name. But not always - there are # certain fallbacks that take a different path. Plejady.Cldr.Locale . fallback_locales ( :nb ) ) =&gt; { :ok , [ # Cldr.LanguageTag &lt; nb [ validated ] &gt; , # Cldr.LanguageTag &lt; no [ validated ] &gt; , # Cldr.LanguageTag &lt; en [ validated ] &gt; ] }","ref":"Plejady.Cldr.Locale.html#fallback_locales/1","title":"Plejady.Cldr.Locale.fallback_locales/1","type":"function"},{"doc":"Returns the &quot;best fit&quot; locale for a given territory. Using the population percentage data from CLDR, the language most commonly spoken in the given territory is used to form a locale name which is then validated against the given backend. First a territory-specific locale is validated and if that fails, the base language only is validate. For example, if the territory is AU then then the language most spoken is &quot;en&quot;. First, the locale &quot;en-AU&quot; is validated and if that fails, &quot;en&quot; is validated. Arguments territory is any ISO 3166 Alpha-2 territory code that can be validated by Cldr.validate_territory/1 Returns {:ok, language_tag} or {:error, {exception, reason}} Examples iex&gt; Plejady.Cldr.Locale.locale_for_territory(:AU) Elixir.Plejady.Cldr.validate_locale(:&quot;en-AU&quot;) iex&gt; Plejady.Cldr.Locale.locale_for_territory(:US) Elixir.Plejady.Cldr.validate_locale(:&quot;en-US&quot;) iex&gt; Plejady.Cldr.Locale.locale_for_territory(:ZZ) {:error, {Cldr.UnknownTerritoryError, &quot;The territory :ZZ is unknown&quot;}}","ref":"Plejady.Cldr.Locale.html#locale_for_territory/1","title":"Plejady.Cldr.Locale.locale_for_territory/1","type":"function"},{"doc":"Returns a &quot;best fit&quot; locale for a host name. Arguments host is any valid host name options is a keyword list of options. The default is [] . Options :tlds is a list of territory codes as upper-cased atoms that are to be considered as top-level domains. See Cldr.Locale.locale_from_host/2 for the default list. Returns {:ok, langauge_tag} or {:error, {exception, reason}} Notes Certain top-level domains have become associated with content underlated to the territory for who the domain is registered. Therefore Google (and perhaps others) do not associate these TLDs as belonging to the territory but rather are considered generic top-level domain names. Examples iex&gt; Plejady.Cldr.Locale . locale_from_host &quot;a.b.com.au&quot; Elixir.Plejady.Cldr . validate_locale ( :&quot;en-AU&quot; ) iex&gt; Plejady.Cldr.Locale . locale_from_host ( &quot;a.b.com.tv&quot; ) { :error , { Cldr.UnknownLocaleError , &quot;No locale was identified for territory \\&quot; tv \\&quot; &quot; } } iex&gt; Plejady.Cldr.Locale . locale_from_host ( &quot;a.b.com&quot; ) { :error , { Cldr.UnknownLocaleError , &quot;No locale was identified for territory \\&quot; com \\&quot; &quot; } }","ref":"Plejady.Cldr.Locale.html#locale_from_host/2","title":"Plejady.Cldr.Locale.locale_from_host/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Locale.html#new/1","title":"Plejady.Cldr.Locale.new/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Locale.html#new!/1","title":"Plejady.Cldr.Locale.new!/1","type":"function"},{"doc":"Returns the last segment of a host that might be a territory. Arguments host is any valid host name Returns {:ok, territory} or {:error, {exception, reason}} Examples iex&gt; Cldr.Locale . territory_from_host ( &quot;a.b.com.au&quot; ) { :ok , :AU } iex&gt; Cldr.Locale . territory_from_host ( &quot;a.b.com&quot; ) { :error , { Cldr.UnknownLocaleError , &quot;No locale was identified for territory \\&quot; com \\&quot; &quot; } }","ref":"Plejady.Cldr.Locale.html#territory_from_host/1","title":"Plejady.Cldr.Locale.territory_from_host/1","type":"function"},{"doc":"Returns the territory from a language tag or locale name. Arguments locale is any language tag returned by Plejady.Cldr.Locale.new/1 or a locale name in the list returned by Plejady.Cldr.known_locale_names/0 Returns A territory code as an atom Examples iex&gt; Plejady.Cldr.Locale . territory_from_locale &quot;en-US&quot; :US iex&gt; Plejady.Cldr.Locale . territory_from_locale &quot;en-US-u-rg-GBzzzz&quot; :GB","ref":"Plejady.Cldr.Locale.html#territory_from_locale/1","title":"Plejady.Cldr.Locale.territory_from_locale/1","type":"function"},{"doc":"Returns the time zone from a language tag or locale name. Arguments locale is any language tag returned by Plejady.Cldr.Locale.new/1 or a locale name in the list returned by Plejady.Cldr.known_locale_names/0 Returns A time zone ID as a string or :error if no time zone can be determined Examples iex&gt; Plejady.Cldr.Locale . timezone_from_locale &quot;en-US-u-tz-ausyd&quot; &quot;Australia/Sydney&quot;","ref":"Plejady.Cldr.Locale.html#timezone_from_locale/1","title":"Plejady.Cldr.Locale.timezone_from_locale/1","type":"function"},{"doc":"Formats numbers and currencies based upon CLDR's decimal formats specification. The format specification is documentated in Unicode TR35 . There are several classes of formatting including non-scientific, scientific, rules based (for spelling and ordinal formats), compact formats that display 1k rather than 1,000 and so on. See Cldr.Number.to_string/2 for specific formatting options. Non-Scientific Notation Formatting The following description applies to formats that do not use scientific notation or significant digits: If the number of actual integer digits exceeds the maximum integer digits, then only the least significant digits are shown. For example, 1997 is formatted as &quot;97&quot; if the maximum integer digits is set to 2. If the number of actual integer digits is less than the minimum integer digits, then leading zeros are added. For example, 1997 is formatted as &quot;01997&quot; if the minimum integer digits is set to 5. If the number of actual fraction digits exceeds the maximum fraction digits, then half-even rounding it performed to the maximum fraction digits. For example, 0.125 is formatted as &quot;0.12&quot; if the maximum fraction digits is 2. This behavior can be changed by specifying a rounding increment and a rounding mode. If the number of actual fraction digits is less than the minimum fraction digits, then trailing zeros are added. For example, 0.125 is formatted as &quot;0.1250&quot; if the minimum fraction digits is set to 4. Trailing fractional zeros are not displayed if they occur j positions after the decimal, where j is less than the maximum fraction digits. For example, 0.10004 is formatted as &quot;0.1&quot; if the maximum fraction digits is four or less. Scientific Notation Formatting Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3. The mantissa is typically in the half-open interval [1.0, 10.0) or sometimes [0.0, 1.0), but it need not be. In a pattern, the exponent character immediately followed by one or more digit characters indicates scientific notation. Example: &quot;0.###E0&quot; formats the number 1234 as &quot;1.234E3&quot;. The number of digit characters after the exponent character gives the minimum exponent digit count. There is no maximum. Negative exponents are formatted using the localized minus sign, not the prefix and suffix from the pattern. This allows patterns such as &quot;0.###E0 m/s&quot;. To prefix positive exponents with a localized plus sign, specify '+' between the exponent and the digits: &quot;0.###E+0&quot; will produce formats &quot;1E+1&quot;, &quot;1E+0&quot;, &quot;1E-1&quot;, and so on. (In localized patterns, use the localized plus sign rather than '+'.) The minimum number of integer digits is achieved by adjusting the exponent. Example: 0.00123 formatted with &quot;00.###E0&quot; yields &quot;12.3E-4&quot;. This only happens if there is no maximum number of integer digits. If there is a maximum, then the minimum number of integer digits is fixed at one. The maximum number of integer digits, if present, specifies the exponent grouping. The most common use of this is to generate engineering notation, in which the exponent is a multiple of three, for example, &quot;##0.###E0&quot;. The number 12345 is formatted using &quot;##0.####E0&quot; as &quot;12.345E3&quot;. When using scientific notation, the formatter controls the digit counts using significant digits logic. The maximum number of significant digits limits the total number of integer and fraction digits that will be shown in the mantissa; it does not affect parsing. For example, 12345 formatted with &quot;##0.##E0&quot; is &quot;12.3E3&quot;. Exponential patterns may not contain grouping separators. Significant Digits There are two ways of controlling how many digits are shows: (a) significant digits counts, or (b) integer and fraction digit counts. Integer and fraction digit counts are described above. When a formatter is using significant digits counts, it uses however many integer and fraction digits are required to display the specified number of significant digits. It may ignore min/max integer/fraction digits, or it may use them to the extent possible.","ref":"Plejady.Cldr.Number.html","title":"Plejady.Cldr.Number","type":"module"},{"doc":"Parse a string locale-aware manner and return a number. Arguments string is any String.t options is a keyword list of options Options :number is one of :integer , :float , :decimal or nil . The default is nil meaning that the type auto-detected as either an integer or a float . :locale is any locale returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag.t . The default is Plejady.Cldr.get_locale/0 . Returns A number of the requested or default type or {:error, {exception, error}} if no number could be determined Notes This function parses a string to return a number but in a locale-aware manner. It will normalise grouping characters and decimal separators, different forms of the + and - symbols that appear in Unicode and strips any _ characters that might be used for formatting in a string. It then parses the number using the Elixir standard library functions. Examples iex&gt; Plejady.Cldr.Number . parse ( &quot;＋1.000,34&quot; , locale : &quot;de&quot; ) { :ok , 1000.34 } iex&gt; Plejady.Cldr.Number . parse ( &quot;-1_000_000.34&quot; ) { :ok , - 1000000.34 } iex&gt; Plejady.Cldr.Number . parse ( &quot;1.000&quot; , locale : &quot;de&quot; , number : :integer ) { :ok , 1000 } iex&gt; Plejady.Cldr.Number . parse ( &quot;＋1.000,34&quot; , locale : &quot;de&quot; , number : :integer ) { :error , { Cldr.Number.ParseError , &quot;The string \\&quot; ＋1.000,34 \\&quot; could not be parsed as a number&quot; } }","ref":"Plejady.Cldr.Number.html#parse/2","title":"Plejady.Cldr.Number.parse/2","type":"function"},{"doc":"Resolve curencies from strings within a list. Arguments list is any list in which currency names and symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is Plejady.Cldr.get_locale() :only is an atom or list of atoms representing the currencies or currency types to be considered for a match. The equates to a list of acceptable currencies for parsing. See the notes below for currency types. :except is an atom or list of atoms representing the currencies or currency types to be not considered for a match. This equates to a list of unacceptable currencies for parsing. See the notes below for currency types. :fuzzy is a float greater than 0.0 and less than or equal to 1.0 which is used as input to String.jaro_distance/2 to determine is the provided currency string is close enough to a known currency string for it to identify definitively a currency code. It is recommended to use numbers greater than 0.8 in order to reduce false positives. Notes The :only and :except options accept a list of currency codes and/or currency types. The following types are recognised. If both :only and :except are specified, the :except entries take priority - that means any entries in :except are removed from the :only entries. :all , the default, considers all currencies :current considers those currencies that have a :to date of nil and which also is a known ISO4217 currency :historic is the opposite of :current :tender considers currencies that are legal tender :unannotated considers currencies that don't have &quot;(some string)&quot; in their names. These are usually financial instruments. Examples iex&gt; Plejady.Cldr.Number . scan ( &quot;100 US dollars&quot; ) ...&gt; |&gt; Plejady.Cldr.Number . resolve_currencies [ 100 , :USD ] iex&gt; Plejady.Cldr.Number . scan ( &quot;100 eurosports&quot; ) ...&gt; |&gt; Plejady.Cldr.Number . resolve_currencies ( fuzzy : 0.75 ) [ 100 , :EUR ] iex&gt; Plejady.Cldr.Number . scan ( &quot;100 dollars des États-Unis&quot; ) ...&gt; |&gt; Plejady.Cldr.Number . resolve_currencies ( locale : &quot;fr&quot; ) [ 100 , :USD ]","ref":"Plejady.Cldr.Number.html#resolve_currencies/2","title":"Plejady.Cldr.Number.resolve_currencies/2","type":"function"},{"doc":"Resolve a currency from a string Arguments list is any list in which currency names and symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is Plejady.Cldr.get_locale() :only is an atom or list of atoms representing the currencies or currency types to be considered for a match. The equates to a list of acceptable currencies for parsing. See the notes below for currency types. :except is an atom or list of atoms representing the currencies or currency types to be not considered for a match. This equates to a list of unacceptable currencies for parsing. See the notes below for currency types. :fuzzy is a float greater than 0.0 and less than or equal to 1.0 which is used as input to String.jaro_distance/2 to determine is the provided currency string is close enough to a known currency string for it to identify definitively a currency code. It is recommended to use numbers greater than 0.8 in order to reduce false positives. Returns An ISO4217 currency code as an atom or {:error, {exception, message}} Notes The :only and :except options accept a list of currency codes and/or currency types. The following types are recognised. If both :only and :except are specified, the :except entries take priority - that means any entries in :except are removed from the :only entries. :all , the default, considers all currencies :current considers those currencies that have a :to date of nil and which also is a known ISO4217 currency :historic is the opposite of :current :tender considers currencies that are legal tender :unannotated considers currencies that don't have &quot;(some string)&quot; in their names. These are usually financial instruments. Examples iex&gt; Plejady.Cldr.Number . resolve_currency ( &quot;US dollars&quot; ) [ :USD ] iex&gt; Plejady.Cldr.Number . resolve_currency ( &quot;100 eurosports&quot; , fuzzy : 0.75 ) [ :EUR ] iex&gt; Plejady.Cldr.Number . resolve_currency ( &quot;dollars des États-Unis&quot; , locale : &quot;fr&quot; ) [ :USD ] iex&gt; Plejady.Cldr.Number . resolve_currency ( &quot;not a known currency&quot; , locale : &quot;fr&quot; ) { :error , { Cldr.UnknownCurrencyError , &quot;The currency \\&quot; not a known currency \\&quot; is unknown or not supported&quot; } }","ref":"Plejady.Cldr.Number.html#resolve_currency/2","title":"Plejady.Cldr.Number.resolve_currency/2","type":"function"},{"doc":"Resolve and tokenize percent or permille from the beginning and/or the end of a string Arguments list is any list in which percent and permille symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is options[:backend].get_locale() Returns An :percent or permille or {:error, {exception, message}} Examples iex&gt; Plejady.Cldr.Number . resolve_per &quot;11%&quot; [ &quot;11&quot; , :percent ] iex&gt; Plejady.Cldr.Number . resolve_per &quot;% of linguists&quot; [ :percent , &quot; of linguists&quot; ] iex&gt; Plejady.Cldr.Number . resolve_per &quot;% of linguists %&quot; [ :percent , &quot; of linguists &quot; , :percent ]","ref":"Plejady.Cldr.Number.html#resolve_per/2","title":"Plejady.Cldr.Number.resolve_per/2","type":"function"},{"doc":"Resolve and tokenize percent and permille sybols from strings within a list. Percent and permille symbols can be identified at the beginning and/or the end of a string. Arguments list is any list in which percent and permille symbols are expected options is a keyword list of options Options :locale is any valid locale returned by Cldr.known_locale_names/1 or a t:Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 The default is options[:backend].get_locale() Examples iex&gt; Plejady.Cldr.Number . scan ( &quot;100%&quot; ) ...&gt; |&gt; Plejady.Cldr.Number . resolve_pers ( ) [ 100 , :percent ]","ref":"Plejady.Cldr.Number.html#resolve_pers/2","title":"Plejady.Cldr.Number.resolve_pers/2","type":"function"},{"doc":"Scans a string locale-aware manner and returns a list of strings and numbers. Arguments string is any String.t options is a keyword list of options Options :number is one of :integer , :float , :decimal or nil . The default is nil meaning that the type auto-detected as either an integer or a float . :locale is any locale returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag.t . The default is Plejady.Cldr.get_locale/0 . Returns A list of strings and numbers Notes Number parsing is performed by Cldr.Number.Parser.parse/2 and any options provided are passed to that function. Examples iex&gt; Plejady.Cldr.Number . scan ( &quot;£1_000_000.34&quot; ) [ &quot;£&quot; , 1000000.34 ] iex&gt; Plejady.Cldr.Number . scan ( &quot;I want £1_000_000 dollars&quot; ) [ &quot;I want £&quot; , 1000000 , &quot; dollars&quot; ] iex&gt; Plejady.Cldr.Number . scan ( &quot;The prize is 23&quot; ) [ &quot;The prize is &quot; , 23 ] iex&gt; Plejady.Cldr.Number . scan ( &quot;The lottery number is 23 for the next draw&quot; ) [ &quot;The lottery number is &quot; , 23 , &quot; for the next draw&quot; ] iex&gt; Plejady.Cldr.Number . scan ( &quot;The loss is -1.000 euros&quot; , locale : &quot;de&quot; , number : :integer ) [ &quot;The loss is &quot; , - 1000 , &quot; euros&quot; ]","ref":"Plejady.Cldr.Number.html#scan/2","title":"Plejady.Cldr.Number.scan/2","type":"function"},{"doc":"Formats a number and applies the :approximately format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; Plejady.Cldr.Number . to_approx_string 1234 { :ok , &quot;~1,234&quot; }","ref":"Plejady.Cldr.Number.html#to_approx_string/2","title":"Plejady.Cldr.Number.to_approx_string/2","type":"function"},{"doc":"Formats a number and applies the :at_least format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Plejady.Cldr.Number.to_string/2 for a description of the available options. Example iex&gt; Plejady.Cldr.Number . to_at_least_string 1234 { :ok , &quot;1,234+&quot; }","ref":"Plejady.Cldr.Number.html#to_at_least_string/2","title":"Plejady.Cldr.Number.to_at_least_string/2","type":"function"},{"doc":"Formats a number and applies the :at_most format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; Plejady.Cldr.Number . to_at_most_string 1234 { :ok , &quot;≤1,234&quot; }","ref":"Plejady.Cldr.Number.html#to_at_most_string/2","title":"Plejady.Cldr.Number.to_at_most_string/2","type":"function"},{"doc":"Formats the first and last numbers of a range and applies the :range format for a locale and number system. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Cldr.Number.to_string/3 for a description of the available options. Example iex&gt; Plejady.Cldr.Number . to_range_string 1234 .. 5678 { :ok , &quot;1,234–5,678&quot; }","ref":"Plejady.Cldr.Number.html#to_range_string/2","title":"Plejady.Cldr.Number.to_range_string/2","type":"function"},{"doc":"Returns a number formatted into a string according to a format pattern and options. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. Options format : the format style or a format string defining how the number is formatted. See Cldr.Number.Format for how format strings can be constructed. See Cldr.Number.Format.format_styles_for/3 to return available format styles for a locale. The default format is :standard . If :format is set to :long or :short then the formatting depends on whether :currency is specified. If not specified then the number is formatted as :decimal_long or :decimal_short . If :currency is specified the number is formatted as :currency_long or :currency_short and :fractional_digits is set to 0 as a default. :format may also be a format defined by CLDR's Rules Based Number Formats (RBNF). Further information is found in the module Cldr.Rbnf . The most commonly used formats in this category are to spell out the number in a the locales language. The applicable formats are :spellout , :spellout_year , :ordinal . A number can also be formatted as roman numbers by using the format :roman or :roman_lower . currency : is the currency for which the number is formatted. If currency is set and no :format is set, :format will be set to either the :default_currency_format key of the backend configuration or the currency format derived from the local. Currency may be any ISO 4217 currency code returned by Cldr.Currency.known_currencies/0 or a ISO 24165 digital token identifier (crypto currency) or :from_locale in which case the currency is derived from the locale. currency_symbol : Allows overriding a currency symbol. The alternatives are: :iso the ISO currency code will be used instead of the default currency symbol. :narrow uses the narrow symbol defined for the locale. The same narrow symbol can be defined for more than one currency and therefore this should be used with care. If no narrow symbol is defined, the standard symbol is used. :symbol uses the standard symbol defined in CLDR. A symbol is unique for each currency and can be safely used. &quot;string&quot; uses string as the currency symbol :standard (the default and recommended) uses the CLDR-defined symbol based upon the currency format for the locale. :cash : a boolean which indicates whether a number being formatted as a :currency is to be considered a cash value or not. Currencies can be rounded differently depending on whether :cash is true or false . *This option is deprecated in favour of currency_digits: :cash . :currency_digits indicates which of the rounding and digits should be used. The options are :accounting which is the default, :cash or :iso :rounding_mode : determines how a number is rounded to meet the precision of the format requested. The available rounding modes are :down , :half_up, :half_even, :ceiling, :floor, :half_down, :up. The default is :half_even . :number_system : determines which of the number systems for a locale should be used to define the separators and digits for the formatted number. If number_system is an atom then number_system is interpreted as a number system. If the :number_system is binary then it is interpreted as a number system name. See Cldr.Number.System.number_system_names_for/2 . The default is :default . :locale : determines the locale in which the number is formatted. See Cldr.known_locale_names/0 . The default is Cldr.get_locale/0 which is the locale currently in affect for this Process and which is set by Cldr.put_locale/1 . If :fractional_digits is set to a positive integer value then the number will be rounded to that number of digits and displayed accordingly - overriding settings that would be applied by default. For example, currencies have fractional digits defined reflecting each currencies minor unit. Setting :fractional_digits will override that setting. If :maximum_integer_digits is set to a positive integer value then the number is left truncated before formatting. For example if the number 1234 is formatted with the option maximum_integer_digits: 2 , the number is truncated to 34 and formatted. If :round_nearest is set to a positive integer value then the number will be rounded to nearest increment of that value - overriding settings that would be applied by default. :minimum_grouping_digits overrides the CLDR definition of minimum grouping digits. For example in the locale es the number 1234 is formatted by default as 1345 because the locale defines the minimium_grouping_digits as 2 . If minimum_grouping_digits: 1 is set as an option the number is formatting as 1.345 . The :minimum_grouping_digits is added to the grouping defined by the number format. If the sum of these two digits is greater than the number of digits in the integer (or fractional) part of the number then no grouping is performed. :wrapper is a 2-arity function that will be called for each number component with parameters string and tag where tag is one of :number , :currency_symbol , :currency_space , :literal , :quote , :percent , :permille , :minus or :plus . The function must return a string. The function can be used to wrap format elements in HTML or other tags. Locale extensions affecting formatting A locale identifier can specify options that affect number formatting when calling Plejady.Cldr.Number.to_string/2 . These options are: cu : defines the currency to be used if the :currency option to Plejady.Cldr.Number.to_string/2 is set to :from_locale nu : defines the number system to be used if the :number_system option to Plejady.Cldr.Number.to_string/2 is not specified. cf : defines the currency format to be used by Plejady.Cldr.Number.to_string/2 if no :format is specified, a :currency option is specified and the backend configuration key :default_currency_format is not specified. That is, the priority for determining which currency format to use is: :currency option if set to :currency or :accounting or :default_currency_format backend configuration key if set or the cf key of the locale or :currency These keys are part of the u extension and that document should be consulted for details on how to construct a locale identifier with these extensions. Wrapping format elements Wrapping elements is particularly useful when formatting a number with a currency symbol and the requirement is to have different HTML formatting applied to the symbol than the number. For example: iex&gt; Plejady.Cldr.Number . to_string ( 100 , format : :currency , currency : :USD , wrapper : fn ...&gt; string , :currency_symbol -&gt; &quot;&lt;span class= \\&quot; symbol \\&quot; &gt;&quot; &lt;&gt; string &lt;&gt; &quot;&lt;/span&gt;&quot; ...&gt; string , :number -&gt; &quot;&lt;span class= \\&quot; number \\&quot; &gt;&quot; &lt;&gt; string &lt;&gt; &quot;&lt;/span&gt;&quot; ...&gt; string , :currency_space -&gt; &quot;&lt;span&gt;&quot; &lt;&gt; string &lt;&gt; &quot;&lt;/span&gt;&quot; ...&gt; string , :literal -&gt; &quot;&lt;span&gt;&quot; &lt;&gt; string &lt;&gt; &quot;&lt;/span&gt;&quot; ...&gt; string , _other -&gt; string ...&gt; end ) { :ok , &quot;&lt;span class= \\&quot; symbol \\&quot; &gt;$&lt;/span&gt;&lt;span class= \\&quot; number \\&quot; &gt;100.00&lt;/span&gt;&quot; } It is also possible and recommended to use the Phoenix.HTML.Tag.content_tag/3 function if wrapping HTML tags since these will ensure HTML entities are correctly encoded. For example: iex&gt; Plejady.Cldr.Number . to_string ( 100 , format : :currency , currency : :USD , wrapper : fn ...&gt; string , :currency_symbol -&gt; Phoenix.HTML.Tag . content_tag ( :span , string , class : &quot;symbol&quot; ) ...&gt; string , :number -&gt; Phoenix.HTML.Tag . content_tag ( :span , string , class : &quot;number&quot; ) ...&gt; string , :currency_space -&gt; Phoenix.HTML.Tag . content_tag ( :span , string ) ...&gt; string , :literal -&gt; Phoenix.HTML.Tag . content_tag ( :span , string ) ...&gt; string , _other -&gt; string ...&gt; end ) { :ok , &quot;&lt;span class= \\&quot; symbol \\&quot; &gt;$&lt;/span&gt;&lt;span class= \\&quot; number \\&quot; &gt;100.00&lt;/span&gt;&quot; } When formatting a number the format is parsed into format elements that might include a currency symbol, a literal string, inserted text between a currency symbol and the currency amount, a percent sign, the number itself and several other elements. In some cases it is helpful to be apply specific formatting to each element. This can be achieved by specifying a :wrapper option. This option takes a 2-arity function as an argument. For each element of the format the wrapper function is called with two parameters: the format element as a string and an atom representing the element type. The wrapper function is required to return a string that is then inserted in the final formatted number. Returns {:ok, string} or {:error, {exception, message}} Examples iex&gt; Plejady.Cldr.Number . to_string 12345 { :ok , &quot;12,345&quot; } iex&gt; Plejady.Cldr.Number . to_string 12345 , locale : &quot;fr&quot; { :ok , &quot;12 345&quot; } iex&gt; Plejady.Cldr.Number . to_string 1345.32 , currency : :EUR , locale : &quot;es&quot; , minimum_grouping_digits : 1 { :ok , &quot;1.345,32 €&quot; } iex&gt; Plejady.Cldr.Number . to_string 1345.32 , currency : :EUR , locale : &quot;es&quot; { :ok , &quot;1345,32 €&quot; } iex&gt; Plejady.Cldr.Number . to_string 12345 , locale : &quot;fr&quot; , currency : &quot;USD&quot; { :ok , &quot;12 345,00 $US&quot; } iex&gt; Plejady.Cldr.Number . to_string 12345 , format : &quot;#E0&quot; { :ok , &quot;1.2345E4&quot; } iex&gt; Plejady.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; { :ok , &quot;THB 12,345.00&quot; } iex&gt; Plejady.Cldr.Number . to_string - 12345 , format : :accounting , currency : &quot;THB&quot; { :ok , &quot;(THB 12,345.00)&quot; } iex&gt; Plejady.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; , ...&gt; locale : &quot;th&quot; { :ok , &quot;฿12,345.00&quot; } iex&gt; Plejady.Cldr.Number . to_string 12345 , format : :accounting , currency : &quot;THB&quot; , ...&gt; locale : &quot;th&quot; , number_system : :native { :ok , &quot;฿๑๒,๓๔๕.๐๐&quot; } iex&gt; Plejady.Cldr.Number . to_string 1244.30 , format : :long { :ok , &quot;1 thousand&quot; } iex&gt; Plejady.Cldr.Number . to_string 1244.30 , format : :long , currency : &quot;USD&quot; { :ok , &quot;1,244 US dollars&quot; } iex&gt; Plejady.Cldr.Number . to_string 1244.30 , format : :short { :ok , &quot;1K&quot; } iex&gt; Plejady.Cldr.Number . to_string 1244.30 , format : :short , currency : &quot;EUR&quot; { :ok , &quot;€1K&quot; } iex&gt; Plejady.Cldr.Number . to_string 1234 , format : :spellout { :ok , &quot;one thousand two hundred thirty-four&quot; } iex&gt; Plejady.Cldr.Number . to_string 1234 , format : :spellout_verbose { :ok , &quot;one thousand two hundred and thirty-four&quot; } iex&gt; Plejady.Cldr.Number . to_string 1989 , format : :spellout_year { :ok , &quot;nineteen eighty-nine&quot; } iex&gt; Plejady.Cldr.Number . to_string 123 , format : :ordinal { :ok , &quot;123rd&quot; } iex&gt; Plejady.Cldr.Number . to_string 123 , format : :roman { :ok , &quot;CXXIII&quot; } iex&gt; Plejady.Cldr.Number . to_string 123 , locale : &quot;th-u-nu-thai&quot; { :ok , &quot;๑๒๓&quot; } Errors An error tuple {:error, reason} will be returned if an error is detected. The two most likely causes of an error return are: A format cannot be compiled. In this case the error tuple will look like: iex&gt; Plejady.Cldr.Number . to_string ( 12345 , format : &quot;0#&quot; ) { :error , { Cldr.FormatCompileError , &quot;Decimal format compiler: syntax error before: \\&quot; # \\&quot; &quot; } } The format style requested is not defined for the locale and number_system . This happens typically when the number system is :algorithmic rather than the more common :numeric . In this case the error return looks like: iex&gt; Plejady.Cldr.Number . to_string ( 1234 , locale : &quot;he&quot; , number_system : &quot;hebr&quot; ) { :error , { Cldr.UnknownFormatError , &quot;The locale :he with number system :hebr does not define a format :standard&quot; } }","ref":"Plejady.Cldr.Number.html#to_string/2","title":"Plejady.Cldr.Number.to_string/2","type":"function"},{"doc":"Same as the execution of to_string/2 but raises an exception if an error would be returned. Arguments number is an integer, float or Decimal to be formatted options is a keyword list defining how the number is to be formatted. See Plejady.Cldr.Number.to_string/2 Returns a formatted number as a string or raises an exception Examples iex&gt; Plejady.Cldr.Number . to_string! 12345 &quot;12,345&quot; iex&gt; Plejady.Cldr.Number . to_string! 12345 , locale : &quot;fr&quot; &quot;12 345&quot;","ref":"Plejady.Cldr.Number.html#to_string!/2","title":"Plejady.Cldr.Number.to_string!/2","type":"function"},{"doc":"Return a valid number system from a provided locale and number system name or type. The number system or number system type must be valid for the given locale. If a number system type is provided, the underlying number system is returned. Arguments locale is any valid locale name returned by Cldr.known_locale_names/1 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 Examples iex&gt; Plejady.Cldr.Number . validate_number_system &quot;en&quot; , :latn { :ok , :latn } iex&gt; Plejady.Cldr.Number . validate_number_system &quot;en&quot; , :default { :ok , :latn } iex&gt; Plejady.Cldr.Number . validate_number_system &quot;en&quot; , :unknown { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :unknown is unknown&quot; } } iex&gt; Plejady.Cldr.Number . validate_number_system &quot;zz&quot; , :default { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zz \\&quot; is invalid&quot; } }","ref":"Plejady.Cldr.Number.html#validate_number_system/2","title":"Plejady.Cldr.Number.validate_number_system/2","type":"function"},{"doc":"Implements cardinal plural rules for numbers.","ref":"Plejady.Cldr.Number.Cardinal.html","title":"Plejady.Cldr.Number.Cardinal","type":"module"},{"doc":"The locale names for which plural rules are defined.","ref":"Plejady.Cldr.Number.Cardinal.html#available_locale_names/0","title":"Plejady.Cldr.Number.Cardinal.available_locale_names/0","type":"function"},{"doc":"The configured locales for which plural rules are defined. Returns the intersection of Plejady.Cldr.known_locale_names/0 and the locales for which Cardinal plural rules are defined. There are many Cldr locales which don't have their own plural rules so this list is the intersection of Cldr 's configured locales and those that have rules.","ref":"Plejady.Cldr.Number.Cardinal.html#known_locale_names/0","title":"Plejady.Cldr.Number.Cardinal.known_locale_names/0","type":"function"},{"doc":"Return the plural key for a given number in a given locale Returns which plural key ( :zero , :one , :two , :few , :many or :other ) a given number fits into within the context of a given locale. Note that these key names should not be interpreted literally. For example, the key returned from Cldr.Number.Ordinal.plural_rule(0, &quot;en&quot;) is actually :other , not :zero . This key can then be used to format a number, date, time, unit, list or other content in a plural-sensitive way. Arguments number is any integer , float or Decimal locale is any locale returned by Cldr.Locale.new!/2 or any locale_name returned by Plejady.Cldr.known_locale_names/0 rounding is one of [:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down] . The default is :half_even . Examples iex&gt; Plejady.Cldr.Number.Cardinal . plural_rule 0 , &quot;fr&quot; :one iex&gt; Plejady.Cldr.Number.Cardinal . plural_rule 0 , &quot;en&quot; :other","ref":"Plejady.Cldr.Number.Cardinal.html#plural_rule/3","title":"Plejady.Cldr.Number.Cardinal.plural_rule/3","type":"function"},{"doc":"Returns all the plural rules defined in CLDR.","ref":"Plejady.Cldr.Number.Cardinal.html#plural_rules/0","title":"Plejady.Cldr.Number.Cardinal.plural_rules/0","type":"function"},{"doc":"Return the plural rules for a locale. Arguments locale is any locale returned by Plejady.Cldr.Locale.new!/1 or any locale_name returned by Plejady.Cldr.known_locale_names/0 The rules are returned in AST form after parsing.","ref":"Plejady.Cldr.Number.Cardinal.html#plural_rules_for/1","title":"Plejady.Cldr.Number.Cardinal.plural_rules_for/1","type":"function"},{"doc":"Pluralize a number using cardinal plural rules and a substitution map. Arguments number is an integer, float or Decimal locale is any locale returned by Plejady.Cldr.Locale.new!/1 or any locale_name returned by Plejady.Cldr.known_locale_names/0 substitutions is a map that maps plural keys to a string. The valid substitution keys are :zero , :one , :two , :few , :many and :other . See also Plejady.Cldr.Number.Cardinal.Cardinal.plural_rule/3 . Examples iex&gt; Plejady.Cldr.Number.Cardinal . pluralize 1 , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Plejady.Cldr.Number.Cardinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; Plejady.Cldr.Number.Cardinal . pluralize 2 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; Plejady.Cldr.Number.Cardinal . pluralize 22 , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; Plejady.Cldr.Number.Cardinal . pluralize Decimal . new ( 1 ) , &quot;en&quot; , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Plejady.Cldr.Number.Cardinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; } nil iex&gt; Plejady.Cldr.Number.Cardinal . pluralize Decimal . new ( 2 ) , &quot;en&quot; , %{ one : &quot;one&quot; , two : &quot;two&quot; } nil iex&gt; Plejady.Cldr.Number.Cardinal . pluralize 1 .. 10 , &quot;ar&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;few&quot; iex&gt; Plejady.Cldr.Number.Cardinal . pluralize 1 .. 10 , &quot;en&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot;","ref":"Plejady.Cldr.Number.Cardinal.html#pluralize/3","title":"Plejady.Cldr.Number.Cardinal.pluralize/3","type":"function"},{"doc":"Functions to manage the collection of number patterns defined in Cldr. Number patterns affect how numbers are interpreted in a localized context. Here are some examples, based on the French locale. The &quot;.&quot; shows where the decimal point should go. The &quot;,&quot; shows where the thousands separator should go. A &quot;0&quot; indicates zero-padding: if the number is too short, a zero (in the locale's numeric set) will go there. A &quot;#&quot; indicates no padding: if the number is too short, nothing goes there. A &quot;¤&quot; shows where the currency sign will go. The following illustrates the effects of different patterns for the French locale, with the number &quot;1234.567&quot;. Notice how the pattern characters ',' and '.' are replaced by the characters appropriate for the locale. Number Pattern Examples Pattern Currency Text #,##0.## n/a 1 234,57 #,##0.### n/a 1 234,567 ###0.##### n/a 1234,567 ###0.0000# n/a 1234,5670 00000.0000 n/a 01234,5670 #,##0.00 ¤ EUR 1 234,57 € The number of # placeholder characters before the decimal do not matter, since no limit is placed on the maximum number of digits. There should, however, be at least one zero some place in the pattern. In currency formats, the number of digits after the decimal also do not matter, since the information in the supplemental data (see Supplemental Currency Data) is used to override the number of decimal places — and the rounding — according to the currency that is being formatted. That can be seen in the above chart, with the difference between Yen and Euro formatting. Details of the number formats are described in the Unicode documentation","ref":"Plejady.Cldr.Number.Format.html","title":"Plejady.Cldr.Number.Format","type":"module"},{"doc":"Returns the decimal formats defined for a given locale. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . Returns {:ok, map} where map is a map of decimal formats keyed by number system or {:error, {exception, message}}","ref":"Plejady.Cldr.Number.Format.html#all_formats_for/1","title":"Plejady.Cldr.Number.Format.all_formats_for/1","type":"function"},{"doc":"Returns the decimal formats defined for a given locale. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . Returns {:ok, map} where map is a map of decimal formats keyed by number system or raises an exception See Plejady.Cldr.Number.Format.Number.Format.all_formats_for/1 for further information.","ref":"Plejady.Cldr.Number.Format.html#all_formats_for!/1","title":"Plejady.Cldr.Number.Format.all_formats_for!/1","type":"function"},{"doc":"Returns the currency space for a given locale and number system.","ref":"Plejady.Cldr.Number.Format.html#currency_spacing/2","title":"Plejady.Cldr.Number.Format.currency_spacing/2","type":"function"},{"doc":"Returns the list of decimal formats in the configured locales including the list of locales configured for precompilation in config.exs . This function exists to allow the decimal formatter to precompile all the known formats at compile time. Example #=&gt; Plejady.Cldr.Number.Format.Format.decimal_format_list [ &quot;#&quot; , &quot;#,##,##0%&quot; , &quot;#,##,##0.###&quot; , &quot;#,##,##0.00¤&quot; , &quot;#,##,##0.00¤;(#,##,##0.00¤)&quot; , &quot;#,##,##0 %&quot; , &quot;#,##0%&quot; , &quot;#,##0.###&quot; , &quot;#,##0.00 ¤&quot; , &quot;#,##0.00 ¤;(#,##0.00 ¤)&quot; , &quot;#,##0.00¤&quot; , &quot;#,##0.00¤;(#,##0.00¤)&quot; , &quot;#,##0 %&quot; , &quot;#0%&quot; , &quot;#0.######&quot; , &quot;#0.00 ¤&quot; , &quot;#E0&quot; , &quot;%#,##0&quot; , &quot;% #,##0&quot; , &quot;0&quot; , &quot;0.000000E+000&quot; , &quot;0000 M ¤&quot; , &quot;0000¤&quot; , &quot;000G ¤&quot; , &quot;000K ¤&quot; , &quot;000M ¤&quot; , &quot;000T ¤&quot; , &quot;000mM ¤&quot; , &quot;000m ¤&quot; , &quot;000 Bio&#39;.&#39; ¤&quot; , &quot;000 Bln ¤&quot; , &quot;000 Bn ¤&quot; , &quot;000 B ¤&quot; , &quot;000 E ¤&quot; , &quot;000 K ¤&quot; , &quot;000 MRD ¤&quot; , &quot;000 Md ¤&quot; , &quot;000 Mio&#39;.&#39; ¤&quot; , &quot;000 Mio ¤&quot; , &quot;000 Mld ¤&quot; , &quot;000 Mln ¤&quot; , &quot;000 Mn ¤&quot; , &quot;000 Mrd&#39;.&#39; ¤&quot; , &quot;000 Mrd ¤&quot; , &quot;000 Mr ¤&quot; , &quot;000 M ¤&quot; , &quot;000 NT ¤&quot; , &quot;000 N ¤&quot; , &quot;000 Tn ¤&quot; , &quot;000 Tr ¤&quot; , ... ]","ref":"Plejady.Cldr.Number.Format.html#decimal_format_list/0","title":"Plejady.Cldr.Number.Format.decimal_format_list/0","type":"function"},{"doc":"Returns the list of decimal formats for a configured locale. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . This function exists to allow the decimal formatter to precompile all the known formats at compile time. Its use is not otherwise recommended. Example iex&gt; Plejady.Cldr.Number.Format . decimal_format_list_for ( :en ) { :ok , [ &quot;#,##0%&quot; , &quot;#,##0.###&quot; , &quot;#,##0.00&quot; , &quot;#,##0.00;(#,##0.00)&quot; , &quot;#E0&quot; , &quot;0 billion&quot; , &quot;0 million&quot; , &quot;0 thousand&quot; , &quot;0 trillion&quot; , &quot;00 billion&quot; , &quot;00 million&quot; , &quot;00 thousand&quot; , &quot;00 trillion&quot; , &quot;000 billion&quot; , &quot;000 million&quot; , &quot;000 thousand&quot; , &quot;000 trillion&quot; , &quot;000B&quot; , &quot;000K&quot; , &quot;000M&quot; , &quot;000T&quot; , &quot;00B&quot; , &quot;00K&quot; , &quot;00M&quot; , &quot;00T&quot; , &quot;0B&quot; , &quot;0K&quot; , &quot;0M&quot; , &quot;0T&quot; , &quot;¤#,##0.00&quot; , &quot;¤#,##0.00;(¤#,##0.00)&quot; , &quot;¤000B&quot; , &quot;¤000K&quot; , &quot;¤000M&quot; , &quot;¤000T&quot; , &quot;¤00B&quot; , &quot;¤00K&quot; , &quot;¤00M&quot; , &quot;¤00T&quot; , &quot;¤0B&quot; , &quot;¤0K&quot; , &quot;¤0M&quot; , &quot;¤0T&quot; , &quot;¤ #,##0.00&quot; , &quot;¤ #,##0.00;(¤ #,##0.00)&quot; , &quot;¤ 000B&quot; , &quot;¤ 000K&quot; , &quot;¤ 000M&quot; , &quot;¤ 000T&quot; , &quot;¤ 00B&quot; , &quot;¤ 00K&quot; , &quot;¤ 00M&quot; , &quot;¤ 00T&quot; , &quot;¤ 0B&quot; , &quot;¤ 0K&quot; , &quot;¤ 0M&quot; , &quot;¤ 0T&quot; ] }","ref":"Plejady.Cldr.Number.Format.html#decimal_format_list_for/1","title":"Plejady.Cldr.Number.Format.decimal_format_list_for/1","type":"function"},{"doc":"Returns the default grouping for a locale as a map. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . Returns {:ok, grouping} or {:error, {exception, message}} Examples iex&gt; Plejady.Cldr.Number.Format . default_grouping_for ( :en ) { :ok , %{ fraction : %{ first : 0 , rest : 0 } , integer : %{ first : 3 , rest : 3 } } }","ref":"Plejady.Cldr.Number.Format.html#default_grouping_for/1","title":"Plejady.Cldr.Number.Format.default_grouping_for/1","type":"function"},{"doc":"Returns the default grouping for a locale or raises on error. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . Returns grouping as a map or raises an exception Examples iex&gt; Plejady.Cldr.Number.Format . default_grouping_for! ( :en ) %{ fraction : %{ first : 0 , rest : 0 } , integer : %{ first : 3 , rest : 3 } }","ref":"Plejady.Cldr.Number.Format.html#default_grouping_for!/1","title":"Plejady.Cldr.Number.Format.default_grouping_for!/1","type":"function"},{"doc":"Return the predfined formats for a given locale and number_system . Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . number_system is any valid number system or number system type returned by Plejady.Cldr.Number.System.number_systems_for/1 . Example Plejady.Cldr.Number.Format . formats_for :fr , :native #=&gt; %Cldr.Number.Format{ accounting : &quot;#,##0.00 ¤;(#,##0.00 ¤)&quot; , currency : &quot;#,##0.00 ¤&quot; , percent : &quot;#,##0 %&quot; , scientific : &quot;#E0&quot; , standard : &quot;#,##0.###&quot; currency_short : [ { &quot;1000&quot; , [ one : &quot;0 k ¤&quot; , other : &quot;0 k ¤&quot; ] } , { &quot;10000&quot; , [ one : &quot;00 k ¤&quot; , other : &quot;00 k ¤&quot; ] } , { &quot;100000&quot; , [ one : &quot;000 k ¤&quot; , other : &quot;000 k ¤&quot; ] } , { &quot;1000000&quot; , [ one : &quot;0 M ¤&quot; , other : &quot;0 M ¤&quot; ] } , { &quot;10000000&quot; , [ one : &quot;00 M ¤&quot; , other : &quot;00 M ¤&quot; ] } , { &quot;100000000&quot; , [ one : &quot;000 M ¤&quot; , other : &quot;000 M ¤&quot; ] } , { &quot;1000000000&quot; , [ one : &quot;0 Md ¤&quot; , other : &quot;0 Md ¤&quot; ] } , { &quot;10000000000&quot; , [ one : &quot;00 Md ¤&quot; , other : &quot;00 Md ¤&quot; ] } , { &quot;100000000000&quot; , [ one : &quot;000 Md ¤&quot; , other : &quot;000 Md ¤&quot; ] } , { &quot;1000000000000&quot; , [ one : &quot;0 Bn ¤&quot; , other : &quot;0 Bn ¤&quot; ] } , { &quot;10000000000000&quot; , [ one : &quot;00 Bn ¤&quot; , other : &quot;00 Bn ¤&quot; ] } , { &quot;100000000000000&quot; , [ one : &quot;000 Bn ¤&quot; , other : &quot;000 Bn ¤&quot; ] } ] , ... }","ref":"Plejady.Cldr.Number.Format.html#formats_for/2","title":"Plejady.Cldr.Number.Format.formats_for/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.Format.html#formats_for!/2","title":"Plejady.Cldr.Number.Format.formats_for!/2","type":"function"},{"doc":"Returns the minimum grouping digits for a locale. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . Returns {:ok, minumum_digits} or {:error, {exception, message}} Examples iex&gt; Plejady.Cldr.Number.Format . minimum_grouping_digits_for ( &quot;en&quot; ) { :ok , 1 }","ref":"Plejady.Cldr.Number.Format.html#minimum_grouping_digits_for/1","title":"Plejady.Cldr.Number.Format.minimum_grouping_digits_for/1","type":"function"},{"doc":"Returns the minimum grouping digits for a locale or raises on error. Arguments locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . Returns minumum_digits or raises an exception Examples iex&gt; Plejady.Cldr.Number.Format . minimum_grouping_digits_for! ( &quot;en&quot; ) 1","ref":"Plejady.Cldr.Number.Format.html#minimum_grouping_digits_for!/1","title":"Plejady.Cldr.Number.Format.minimum_grouping_digits_for!/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.Formatter.Decimal.html","title":"Plejady.Cldr.Number.Formatter.Decimal","type":"module"},{"doc":"","ref":"Plejady.Cldr.Number.Formatter.Decimal.html#metadata!/1","title":"Plejady.Cldr.Number.Formatter.Decimal.metadata!/1","type":"function"},{"doc":"Formats a number according to a decimal format string. Arguments number is an integer, float or Decimal format is a format string. See Plejady.Cldr.Number for further information. options is a map of options. See Plejady.Cldr.Number.to_string/2 for further information.","ref":"Plejady.Cldr.Number.Formatter.Decimal.html#to_string/3","title":"Plejady.Cldr.Number.Formatter.Decimal.to_string/3","type":"function"},{"doc":"Implements ordinal plural rules for numbers.","ref":"Plejady.Cldr.Number.Ordinal.html","title":"Plejady.Cldr.Number.Ordinal","type":"module"},{"doc":"The locale names for which plural rules are defined.","ref":"Plejady.Cldr.Number.Ordinal.html#available_locale_names/0","title":"Plejady.Cldr.Number.Ordinal.available_locale_names/0","type":"function"},{"doc":"The configured locales for which plural rules are defined. Returns the intersection of Plejady.Cldr.known_locale_names/0 and the locales for which Ordinal plural rules are defined. There are many Cldr locales which don't have their own plural rules so this list is the intersection of Cldr 's configured locales and those that have rules.","ref":"Plejady.Cldr.Number.Ordinal.html#known_locale_names/0","title":"Plejady.Cldr.Number.Ordinal.known_locale_names/0","type":"function"},{"doc":"Return the plural key for a given number in a given locale Returns which plural key ( :zero , :one , :two , :few , :many or :other ) a given number fits into within the context of a given locale. Note that these key names should not be interpreted literally. For example, the key returned from Cldr.Number.Ordinal.plural_rule(0, &quot;en&quot;) is actually :other , not :zero . This key can then be used to format a number, date, time, unit, list or other content in a plural-sensitive way. Arguments number is any integer , float or Decimal locale is any locale returned by Cldr.Locale.new!/2 or any locale_name returned by Plejady.Cldr.known_locale_names/0 rounding is one of [:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down] . The default is :half_even . Examples iex&gt; Plejady.Cldr.Number.Ordinal . plural_rule 0 , &quot;fr&quot; :other iex&gt; Plejady.Cldr.Number.Ordinal . plural_rule 1 , &quot;en&quot; :one","ref":"Plejady.Cldr.Number.Ordinal.html#plural_rule/3","title":"Plejady.Cldr.Number.Ordinal.plural_rule/3","type":"function"},{"doc":"Returns all the plural rules defined in CLDR.","ref":"Plejady.Cldr.Number.Ordinal.html#plural_rules/0","title":"Plejady.Cldr.Number.Ordinal.plural_rules/0","type":"function"},{"doc":"Return the plural rules for a locale. Arguments locale is any locale returned by Plejady.Cldr.Locale.new!/1 or any locale_name returned by Plejady.Cldr.known_locale_names/0 The rules are returned in AST form after parsing.","ref":"Plejady.Cldr.Number.Ordinal.html#plural_rules_for/1","title":"Plejady.Cldr.Number.Ordinal.plural_rules_for/1","type":"function"},{"doc":"Pluralize a number using ordinal plural rules and a substitution map. Arguments number is an integer, float or Decimal or a Range.t{} . When a range, The is that in any usage, the start value is strictly less than the end value, and that no values are negative. Results for any cases that do not meet these criteria are undefined. locale is any locale returned by Plejady.Cldr.Locale.new!/1 or any locale_name returned by Plejady.Cldr.known_locale_names/0 substitutions is a map that maps plural keys to a string. The valid substitution keys are :zero , :one , :two , :few , :many and :other . See also Plejady.Cldr.Number.Ordinal.Ordinal.plural_rule/3 . Examples iex&gt; Plejady.Cldr.Number.Ordinal . pluralize 1 , :en , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Plejady.Cldr.Number.Ordinal . pluralize 2 , :en , %{ one : &quot;one&quot; } nil iex&gt; Plejady.Cldr.Number.Ordinal . pluralize 2 , :en , %{ one : &quot;one&quot; , two : &quot;two&quot; } &quot;two&quot; iex&gt; Plejady.Cldr.Number.Ordinal . pluralize 22 , :en , %{ one : &quot;one&quot; , two : &quot;two&quot; , other : &quot;other&quot; } &quot;two&quot; iex&gt; Plejady.Cldr.Number.Ordinal . pluralize Decimal . new ( 1 ) , :en , %{ one : &quot;one&quot; } &quot;one&quot; iex&gt; Plejady.Cldr.Number.Ordinal . pluralize Decimal . new ( 2 ) , :en , %{ one : &quot;one&quot; } nil iex&gt; Plejady.Cldr.Number.Ordinal . pluralize Decimal . new ( 2 ) , :en , %{ one : &quot;one&quot; , two : &quot;two&quot; } &quot;two&quot; iex&gt; Plejady.Cldr.Number.Ordinal . pluralize 1 .. 10 , &quot;ar&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot; iex&gt; Plejady.Cldr.Number.Ordinal . pluralize 1 .. 10 , &quot;en&quot; , %{ one : &quot;one&quot; , few : &quot;few&quot; , other : &quot;other&quot; } &quot;other&quot;","ref":"Plejady.Cldr.Number.Ordinal.html#pluralize/3","title":"Plejady.Cldr.Number.Ordinal.pluralize/3","type":"function"},{"doc":"Implements plural rules for ranges","ref":"Plejady.Cldr.Number.PluralRule.Range.html","title":"Plejady.Cldr.Number.PluralRule.Range","type":"module"},{"doc":"Returns a final plural type for a start-of-range plural type, an end-of-range plural type and a locale. Arguments first is a plural type for the start of a range last is a plural type for the end of a range locale is any Cldr.LanguageTag.t or a language name (not locale name) Example iex&gt; Plejady.Cldr.Number.PluralRule.Range . plural_rule :other , :few , &quot;ar&quot; :few","ref":"Plejady.Cldr.Number.PluralRule.Range.html#plural_rule/3","title":"Plejady.Cldr.Number.PluralRule.Range.plural_rule/3","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.Symbol.html","title":"Plejady.Cldr.Number.Symbol","type":"module"},{"doc":"Returns a list of all decimal symbols defined by the locales configured in this backend as a list.","ref":"Plejady.Cldr.Number.Symbol.html#all_decimal_symbols/0","title":"Plejady.Cldr.Number.Symbol.all_decimal_symbols/0","type":"function"},{"doc":"Returns a list of all decimal symbols defined by the locales configured in this backend as a string. This string can be used as a character class when builing a regular expression.","ref":"Plejady.Cldr.Number.Symbol.html#all_decimal_symbols_class/0","title":"Plejady.Cldr.Number.Symbol.all_decimal_symbols_class/0","type":"function"},{"doc":"Returns a list of all grouping symbols defined by the locales configured in this backend as a list.","ref":"Plejady.Cldr.Number.Symbol.html#all_grouping_symbols/0","title":"Plejady.Cldr.Number.Symbol.all_grouping_symbols/0","type":"function"},{"doc":"Returns a list of all grouping symbols defined by the locales configured in this backend as a string. This string can be used as a character class when builing a regular expression.","ref":"Plejady.Cldr.Number.Symbol.html#all_grouping_symbols_class/0","title":"Plejady.Cldr.Number.Symbol.all_grouping_symbols_class/0","type":"function"},{"doc":"Returns a map of Cldr.Number.Symbol.t structs of the number symbols for each of the number systems of a locale. Options locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 . The default is Plejady.Cldr.get_locale/0 . Example: iex&gt; Plejady.Cldr.Number.Symbol . number_symbols_for ( :th ) { :ok , %{ latn : % Cldr.Number.Symbol { decimal : &quot;.&quot; , exponential : &quot;E&quot; , group : &quot;,&quot; , infinity : &quot;∞&quot; , list : &quot;;&quot; , minus_sign : &quot;-&quot; , nan : &quot;NaN&quot; , per_mille : &quot;‰&quot; , percent_sign : &quot;%&quot; , plus_sign : &quot;+&quot; , superscripting_exponent : &quot;×&quot; , time_separator : &quot;:&quot; } , thai : % Cldr.Number.Symbol { decimal : &quot;.&quot; , exponential : &quot;E&quot; , group : &quot;,&quot; , infinity : &quot;∞&quot; , list : &quot;;&quot; , minus_sign : &quot;-&quot; , nan : &quot;NaN&quot; , per_mille : &quot;‰&quot; , percent_sign : &quot;%&quot; , plus_sign : &quot;+&quot; , superscripting_exponent : &quot;×&quot; , time_separator : &quot;:&quot; } } }","ref":"Plejady.Cldr.Number.Symbol.html#number_symbols_for/1","title":"Plejady.Cldr.Number.Symbol.number_symbols_for/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.Symbol.html#number_symbols_for/2","title":"Plejady.Cldr.Number.Symbol.number_symbols_for/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.System.html","title":"Plejady.Cldr.Number.System","type":"module"},{"doc":"Returns the actual number system from a number system type. locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Cldr.Locale.new!/2 system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 This function will decode a number system type into the actual number system. If the number system provided can't be decoded it is returned as is. Examples iex&gt; Plejady.Cldr.Number.System . number_system_for &quot;th&quot; , :latn { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; Plejady.Cldr.Number.System . number_system_for &quot;en&quot; , :default { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; Plejady.Cldr.Number.System . number_system_for &quot;he&quot; , :traditional { :ok , %{ rules : &quot;hebrew&quot; , type : :algorithmic } } iex&gt; Plejady.Cldr.Number.System . number_system_for &quot;en&quot; , :native { :ok , %{ digits : &quot;0123456789&quot; , type : :numeric } } iex&gt; Plejady.Cldr.Number.System . number_system_for &quot;en&quot; , :finance { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :finance is unknown for the locale named :en. Valid number systems are %{default: :latn, native: :latn}&quot; } }","ref":"Plejady.Cldr.Number.System.html#number_system_for/2","title":"Plejady.Cldr.Number.System.number_system_for/2","type":"function"},{"doc":"Returns the number system from a language tag or locale name. Arguments locale is any language tag returned be Cldr.Locale.new/2 or a locale name in the list returned by Cldr.known_locale_names/1 Returns A number system name as an atom Examples iex&gt; Plejady.Cldr.Number.System . number_system_from_locale &quot;en-US-u-nu-thai&quot; :thai iex&gt; Plejady.Cldr.Number.System . number_system_from_locale &quot;en-US&quot; :latn","ref":"Plejady.Cldr.Number.System.html#number_system_from_locale/1","title":"Plejady.Cldr.Number.System.number_system_from_locale/1","type":"function"},{"doc":"Returns the number systems available for a locale or {:error, message} if the locale is not known. locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 Examples iex&gt; Plejady.Cldr.Number.System . number_system_names_for &quot;en&quot; { :ok , [ :latn ] } iex&gt; Plejady.Cldr.Number.System . number_system_names_for &quot;zz&quot; { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zz \\&quot; is invalid&quot; } }","ref":"Plejady.Cldr.Number.System.html#number_system_names_for/1","title":"Plejady.Cldr.Number.System.number_system_names_for/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.System.html#number_system_names_for!/1","title":"Plejady.Cldr.Number.System.number_system_names_for!/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.System.html#number_system_types_for/1","title":"Plejady.Cldr.Number.System.number_system_types_for/1","type":"function"},{"doc":"Returns the number systems available for a locale or {:error, message} if the locale is not known. locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 Examples iex&gt; Plejady.Cldr.Number.System . number_systems_for &quot;en&quot; { :ok , %{ default : :latn , native : :latn } } iex&gt; Plejady.Cldr.Number.System . number_systems_for &quot;th&quot; { :ok , %{ default : :latn , native : :thai } } iex&gt; Plejady.Cldr.Number.System . number_systems_for &quot;zz&quot; { :error , { Cldr.InvalidLanguageError , &quot;The language \\&quot; zz \\&quot; is invalid&quot; } }","ref":"Plejady.Cldr.Number.System.html#number_systems_for/1","title":"Plejady.Cldr.Number.System.number_systems_for/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.System.html#number_systems_for!/1","title":"Plejady.Cldr.Number.System.number_systems_for!/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.System.html#number_systems_like/2","title":"Plejady.Cldr.Number.System.number_systems_like/2","type":"function"},{"doc":"Returns a number system name for a given locale and number system reference. system_name is any number system name returned by Plejady.Cldr.known_number_systems/0 or a number system type returned by Plejady.Cldr.known_number_system_types/0 locale is any valid locale name returned by Plejady.Cldr.known_locale_names/0 or a Cldr.LanguageTag struct returned by Plejady.Cldr.Locale.new!/1 Number systems can be references in one of two ways: As a number system type such as :default, :native, :traditional and :finance. This allows references to a number system for a locale in a consistent fashion for a given use WIth the number system name directly, such as :latn, :arab or any of the other 70 or so This function dereferences the supplied system_name and returns the actual system name. Examples ex &gt; Plejady.Cldr.Number.System . system_name_from ( :default , &quot;en&quot; ) { :ok , :latn } iex&gt; Plejady.Cldr.Number.System . system_name_from ( &quot;latn&quot; , &quot;en&quot; ) { :ok , :latn } iex&gt; Plejady.Cldr.Number.System . system_name_from ( :native , &quot;en&quot; ) { :ok , :latn } iex&gt; Plejady.Cldr.Number.System . system_name_from ( :nope , &quot;en&quot; ) { :error , { Cldr.UnknownNumberSystemError , &quot;The number system :nope is unknown&quot; } } Note that return value is not guaranteed to be a valid number system for the given locale as demonstrated in the third example.","ref":"Plejady.Cldr.Number.System.html#system_name_from/2","title":"Plejady.Cldr.Number.System.system_name_from/2","type":"function"},{"doc":"Converts a number into the representation of a non-latin number system. This function converts numbers to a known number system only, it does not provide number formatting. number is a float , integer or Decimal system_name is any number system name returned by Cldr.known_number_systems/0 or a number system type returned by Cldr.known_number_system_types/0 There are two types of number systems in CLDR: :numeric in which the number system defines a direct mapping between the latin digits 0..9 into a the number system equivalent. In this case, to_system/2 invokes Cldr.Number.Transliterate.transliterate_digits/3 for the given number. :algorithmic in which the number system does not have the same structure as the :latn number system and therefore the conversion is done algorithmically. For CLDR the algorithm is implemented through Cldr.Rbnf rulesets. These rulesets are considered by CLDR to be less rigorous than the :numeric number systems and caution and testing for a specific use case is recommended. Examples iex&gt; Plejady.Cldr.Number.System . to_system 123456 , :hebr { :ok , &quot;קכ״ג׳תנ״ו&quot; } iex&gt; Plejady.Cldr.Number.System . to_system 123 , :hans { :ok , &quot;一百二十三&quot; } iex&gt; Plejady.Cldr.Number.System . to_system 123 , :hant { :ok , &quot;一百二十三&quot; } iex&gt; Plejady.Cldr.Number.System . to_system 123 , :hansfin { :ok , &quot;壹佰贰拾叁&quot; }","ref":"Plejady.Cldr.Number.System.html#to_system/2","title":"Plejady.Cldr.Number.System.to_system/2","type":"function"},{"doc":"Converts a number into the representation of a non-latin number system. Returns a converted string or raises on error. number is a float , integer or Decimal system_name is any number system name returned by Plejady.Cldr.known_number_systems/0 or a number system type returned by Plejady.Cldr.known_number_system_types/0 See Plejady.Cldr.Number.System.to_system/2 for further information. Examples iex&gt; Plejady.Cldr.Number.System . to_system! 123 , :hans &quot;一百二十三&quot; iex&gt; Plejady.Cldr.Number.System . to_system! 123 , :hant &quot;一百二十三&quot; iex&gt; Plejady.Cldr.Number.System . to_system! 123 , :hansfin &quot;壹佰贰拾叁&quot;","ref":"Plejady.Cldr.Number.System.html#to_system!/2","title":"Plejady.Cldr.Number.System.to_system!/2","type":"function"},{"doc":"Transliteration for digits and separators. Transliterating a string is an expensive business. First the string has to be exploded into its component graphemes. Then for each grapheme we have to map to the equivalent in the other {locale, number_system} . Then we have to reassemble the string. Effort is made to short circuit where possible. Transliteration is not required for any {locale, number_system} that is the same as {&quot;en&quot;, &quot;latn&quot;} since the implementation uses this combination for the placeholders during formatting already. When short circuiting is possible (typically the en-* locales with &quot;latn&quot; number_system - the total number of short circuited locales is 211 of the 537 in CLDR) the overall number formatting is twice as fast than when formal transliteration is required. Configuring precompilation of digit transliterations This module includes Cldr.Number.Transliterate.transliterate_digits/3 which transliterates digits between number systems. For example from :arabic to :latn. Since generating a transliteration map is slow, pairs of transliterations can be configured so that the transliteration map is created at compile time and therefore speeding up transliteration at run time. To configure these transliteration pairs, add the to the use Cldr configuration in a backend module: defmodule MyApp.Cldr do use Cldr , locale : [ &quot;en&quot; , &quot;fr&quot; , &quot;th&quot; ] , default_locale : &quot;en&quot; , precompile_transliterations : [ { :latn , :thai } , { :arab , :thai } ] end Where each tuple in the list configures one transliteration map. In this example, two maps are configured: from :latn to :thai and from :arab to :thai . A list of configurable number systems is returned by Cldr.Number.System.systems_with_digits/0 . If a transliteration is requested between two number pairs that have not been configured for precompilation, a warning is logged.","ref":"Plejady.Cldr.Number.Transliterate.html","title":"Plejady.Cldr.Number.Transliterate","type":"module"},{"doc":"Transliterates from latin digits to another number system's digits. Transliterates the latin digits 0..9 to their equivalents in another number system. Also transliterates the decimal and grouping separators as well as the plus, minus and exponent symbols. Any other character in the string will be returned &quot;as is&quot;. Arguments sequence is the string to be transliterated. locale is any known locale, defaulting to Plejady.Cldr.get_locale/0 . number_system is any known number system. If expressed as a string it is the actual name of a known number system. If epressed as an atom it is used as a key to look up a number system for the locale (the usual keys are :default and :native but :traditional and :finance are also part of the standard). See Plejady.Cldr.Number.System.number_systems_for/1 for a locale to see what number system types are defined. The default is :default . For available number systems see Cldr.Number.System.number_systems/0 and Plejady.Cldr.Number.System.number_systems_for/1 . Also see Plejady.Cldr.Number.Symbol.number_symbols_for/1 . Examples iex&gt; Plejady.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; ) &quot;123556&quot; iex&gt; Plejady.Cldr.Number.Transliterate . transliterate ( &quot;123,556.000&quot; , &quot;fr&quot; , :default ) &quot;123 556,000&quot; iex&gt; Plejady.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , :default ) &quot;123556&quot; iex&gt; Plejady.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , &quot;thai&quot; ) &quot;๑๒๓๕๕๖&quot; iex&gt; Plejady.Cldr.Number.Transliterate . transliterate ( &quot;123556&quot; , &quot;th&quot; , :native ) &quot;๑๒๓๕๕๖&quot; iex&gt; Plejady.Cldr.Number.Transliterate . transliterate ( &quot;Some number is: 123556&quot; , &quot;th&quot; , &quot;thai&quot; ) &quot;Some number is: ๑๒๓๕๕๖&quot;","ref":"Plejady.Cldr.Number.Transliterate.html#transliterate/3","title":"Plejady.Cldr.Number.Transliterate.transliterate/3","type":"function"},{"doc":"","ref":"Plejady.Cldr.Number.Transliterate.html#transliterate!/3","title":"Plejady.Cldr.Number.Transliterate.transliterate!/3","type":"function"},{"doc":"Transliterates digits from one number system to another number system digits is binary representation of a number from_system and to_system are number system names in atom form. See Cldr.Number.System.systems_with_digits/0 for available number systems. Example iex&gt; Plejady.Cldr.Number.Transliterate . transliterate_digits &quot;٠١٢٣٤٥٦٧٨٩&quot; , :arab , :latn &quot;0123456789&quot;","ref":"Plejady.Cldr.Number.Transliterate.html#transliterate_digits/3","title":"Plejady.Cldr.Number.Transliterate.transliterate_digits/3","type":"function"},{"doc":"Functions to implement the number system rule-based-number-format rules of CLDR. These rules are defined only on the &quot;und&quot; locale and represent specialised number formatting. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; Plejady.Cldr.Rbnf.NumberSystem . rule_sets ( :und ) [ :zz_default , :tamil , :roman_upper , :roman_lower , :hebrew_item , :hebrew , :greek_upper , :greek_lower , :georgian , :ethiopic , :cyrillic_lower , :armenian_upper , :armenian_lower ] A rule can then be invoked on an available rule_set. For example iex&gt; Plejady.Cldr.Rbnf.NumberSystem . roman_upper ( 123 , :und ) &quot;CXXIII&quot; This particular call is equivalent to the call through the public API of: iex&gt; Plejady.Cldr.Number . to_string ( 123 , format : :roman ) { :ok , &quot;CXXIII&quot; }","ref":"Plejady.Cldr.Rbnf.NumberSystem.html","title":"Plejady.Cldr.Rbnf.NumberSystem","type":"module"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#all_rule_sets/0","title":"Plejady.Cldr.Rbnf.NumberSystem.all_rule_sets/0","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#armenian_lower/1","title":"Plejady.Cldr.Rbnf.NumberSystem.armenian_lower/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#armenian_lower/2","title":"Plejady.Cldr.Rbnf.NumberSystem.armenian_lower/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#armenian_upper/1","title":"Plejady.Cldr.Rbnf.NumberSystem.armenian_upper/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#armenian_upper/2","title":"Plejady.Cldr.Rbnf.NumberSystem.armenian_upper/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/1","title":"Plejady.Cldr.Rbnf.NumberSystem.cyrillic_lower/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/2","title":"Plejady.Cldr.Rbnf.NumberSystem.cyrillic_lower/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_1_10/2","title":"Plejady.Cldr.Rbnf.NumberSystem.cyrillic_lower_1_10/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_final/2","title":"Plejady.Cldr.Rbnf.NumberSystem.cyrillic_lower_final/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_post/2","title":"Plejady.Cldr.Rbnf.NumberSystem.cyrillic_lower_post/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_thousands/2","title":"Plejady.Cldr.Rbnf.NumberSystem.cyrillic_lower_thousands/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#ethiopic/1","title":"Plejady.Cldr.Rbnf.NumberSystem.ethiopic/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#ethiopic/2","title":"Plejady.Cldr.Rbnf.NumberSystem.ethiopic/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#ethiopic_p1/2","title":"Plejady.Cldr.Rbnf.NumberSystem.ethiopic_p1/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#ethiopic_p2/2","title":"Plejady.Cldr.Rbnf.NumberSystem.ethiopic_p2/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#ethiopic_p3/2","title":"Plejady.Cldr.Rbnf.NumberSystem.ethiopic_p3/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#ethiopic_p/2","title":"Plejady.Cldr.Rbnf.NumberSystem.ethiopic_p/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#georgian/1","title":"Plejady.Cldr.Rbnf.NumberSystem.georgian/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#georgian/2","title":"Plejady.Cldr.Rbnf.NumberSystem.georgian/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#greek_lower/1","title":"Plejady.Cldr.Rbnf.NumberSystem.greek_lower/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#greek_lower/2","title":"Plejady.Cldr.Rbnf.NumberSystem.greek_lower/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#greek_numeral_majuscules/2","title":"Plejady.Cldr.Rbnf.NumberSystem.greek_numeral_majuscules/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#greek_numeral_minuscules/2","title":"Plejady.Cldr.Rbnf.NumberSystem.greek_numeral_minuscules/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#greek_upper/1","title":"Plejady.Cldr.Rbnf.NumberSystem.greek_upper/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#greek_upper/2","title":"Plejady.Cldr.Rbnf.NumberSystem.greek_upper/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#hebrew/1","title":"Plejady.Cldr.Rbnf.NumberSystem.hebrew/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#hebrew/2","title":"Plejady.Cldr.Rbnf.NumberSystem.hebrew/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#hebrew_0_99/2","title":"Plejady.Cldr.Rbnf.NumberSystem.hebrew_0_99/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#hebrew_item/1","title":"Plejady.Cldr.Rbnf.NumberSystem.hebrew_item/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#hebrew_item/2","title":"Plejady.Cldr.Rbnf.NumberSystem.hebrew_item/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#hebrew_item_hundreds/2","title":"Plejady.Cldr.Rbnf.NumberSystem.hebrew_item_hundreds/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#hebrew_thousands/2","title":"Plejady.Cldr.Rbnf.NumberSystem.hebrew_thousands/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#roman_lower/1","title":"Plejady.Cldr.Rbnf.NumberSystem.roman_lower/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#roman_lower/2","title":"Plejady.Cldr.Rbnf.NumberSystem.roman_lower/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#roman_upper/1","title":"Plejady.Cldr.Rbnf.NumberSystem.roman_upper/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#roman_upper/2","title":"Plejady.Cldr.Rbnf.NumberSystem.roman_upper/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#rule_sets/0","title":"Plejady.Cldr.Rbnf.NumberSystem.rule_sets/0","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#rule_sets/1","title":"Plejady.Cldr.Rbnf.NumberSystem.rule_sets/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#tamil/1","title":"Plejady.Cldr.Rbnf.NumberSystem.tamil/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#tamil/2","title":"Plejady.Cldr.Rbnf.NumberSystem.tamil/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#tamil_thousands/2","title":"Plejady.Cldr.Rbnf.NumberSystem.tamil_thousands/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#zz_default/1","title":"Plejady.Cldr.Rbnf.NumberSystem.zz_default/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.NumberSystem.html#zz_default/2","title":"Plejady.Cldr.Rbnf.NumberSystem.zz_default/2","type":"function"},{"doc":"Functions to implement the ordinal rule-based-number-format rules of CLDR. As CLDR notes, the data is incomplete or non-existent for many languages. It is considered complete for English however. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; Plejady.Cldr.Rbnf.Ordinal . rule_sets ( :en ) [ :digits_ordinal ] iex&gt; Plejady.Cldr.Rbnf.Ordinal . rule_sets ( &quot;fr&quot; ) [ :digits_ordinal_masculine_plural , :digits_ordinal_masculine , :digits_ordinal_feminine_plural , :digits_ordinal_feminine , :digits_ordinal ] A rule can then be invoked on an available rule_set. For example iex&gt; Plejady.Cldr.Rbnf.Ordinal . digits_ordinal ( 123 , :en ) &quot;123rd&quot; This call is equivalent to the call through the public API of: iex&gt; Plejady.Cldr.Number . to_string ( 123 , format : :ordinal ) { :ok , &quot;123rd&quot; }","ref":"Plejady.Cldr.Rbnf.Ordinal.html","title":"Plejady.Cldr.Rbnf.Ordinal","type":"module"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Ordinal.html#all_rule_sets/0","title":"Plejady.Cldr.Rbnf.Ordinal.all_rule_sets/0","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Ordinal.html#digits_ordinal/2","title":"Plejady.Cldr.Rbnf.Ordinal.digits_ordinal/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Ordinal.html#rule_sets/0","title":"Plejady.Cldr.Rbnf.Ordinal.rule_sets/0","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Ordinal.html#rule_sets/1","title":"Plejady.Cldr.Rbnf.Ordinal.rule_sets/1","type":"function"},{"doc":"Functions to implement the spellout rule-based-number-format rules of CLDR. As CLDR notes, the data is incomplete or non-existent for many languages. It is considered complete for English however. The standard public API for RBNF is via the Cldr.Number.to_string/2 function. The functions on this module are defined at compile time based upon the RBNF rules defined in the Unicode CLDR data repository. Available rules are identified by: iex&gt; Plejady.Cldr.Rbnf.Spellout . rule_sets ( &quot;en&quot; ) [ :spellout_ordinal_verbose , :spellout_ordinal , :spellout_numbering_year , :spellout_numbering_verbose , :spellout_numbering , :spellout_cardinal_verbose , :spellout_cardinal ] A rule can then be invoked on an available rule_set. For example: iex&gt; Plejady.Cldr.Rbnf.Spellout . spellout_ordinal ( 123 , &quot;en&quot; ) &quot;one hundred twenty-third&quot; This call is equivalent to the call through the public API of: iex&gt; Plejady.Cldr.Number . to_string ( 123 , format : :spellout ) { :ok , &quot;one hundred twenty-three&quot; }","ref":"Plejady.Cldr.Rbnf.Spellout.html","title":"Plejady.Cldr.Rbnf.Spellout","type":"module"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#all_rule_sets/0","title":"Plejady.Cldr.Rbnf.Spellout.all_rule_sets/0","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#rule_sets/0","title":"Plejady.Cldr.Rbnf.Spellout.rule_sets/0","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#rule_sets/1","title":"Plejady.Cldr.Rbnf.Spellout.rule_sets/1","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#spellout_cardinal/2","title":"Plejady.Cldr.Rbnf.Spellout.spellout_cardinal/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#spellout_cardinal_feminine/2","title":"Plejady.Cldr.Rbnf.Spellout.spellout_cardinal_feminine/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#spellout_cardinal_masculine/2","title":"Plejady.Cldr.Rbnf.Spellout.spellout_cardinal_masculine/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#spellout_cardinal_neuter/2","title":"Plejady.Cldr.Rbnf.Spellout.spellout_cardinal_neuter/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#spellout_numbering/2","title":"Plejady.Cldr.Rbnf.Spellout.spellout_numbering/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#spellout_numbering_year/2","title":"Plejady.Cldr.Rbnf.Spellout.spellout_numbering_year/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Rbnf.Spellout.html#spellout_ordinal/2","title":"Plejady.Cldr.Rbnf.Spellout.spellout_ordinal/2","type":"function"},{"doc":"","ref":"Plejady.Cldr.Time.html","title":"Plejady.Cldr.Time","type":"module"},{"doc":"Formats a time according to a format string as defined in CLDR and described in TR35 Returns {:ok, formatted_time} or {:error, reason} . Arguments time is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys hour , minute , second and optionally calendar and microsecond options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale: any locale returned by Cldr.known_locale_names/1 . The default is Cldr.get_locale() number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; locale, for example, era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Examples iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] { :ok , &quot;7:35:13 AM&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :short { :ok , &quot;7:35 AM&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :medium , locale : &quot;fr&quot; { :ok , &quot;07:35:13&quot; } iex&gt; Cldr.Time . to_string ~T[07:35:13.215217] , format : :medium { :ok , &quot;7:35:13 AM&quot; } iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Cldr.Time . to_string datetime , format : :long { :ok , &quot;11:59:59 PM UTC&quot; }","ref":"Plejady.Cldr.Time.html#to_string/2","title":"Plejady.Cldr.Time.to_string/2","type":"function"},{"doc":"Formats a time according to a format string as defined in CLDR and described in TR35 . Arguments time is a %DateTime{} or %NaiveDateTime{} struct or any map that contains the keys hour , minute , second and optionally calendar and microsecond options is a keyword list of options for formatting. Options format: :short | :medium | :long | :full or a format string. The default is :medium locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated era: :variant will use a variant for the era is one is available in the locale. In the &quot;en&quot; locale, for example, era: :variant will return &quot;BCE&quot; instead of &quot;BC&quot;. period: :variant will use a variant for the time period and flexible time period if one is available in the locale. For example, in the &quot;en&quot; locale period: :variant will return &quot;pm&quot; instead of &quot;PM&quot; Returns formatted_time_string or raises an exception. Examples iex&gt; Plejady.Cldr.Time . to_string! ~T[07:35:13.215217] &quot;7:35:13 AM&quot; iex&gt; Plejady.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :short &quot;7:35 AM&quot; iex&gt; Plejady.Cldr.Time . to_string ~T[07:35:13.215217] , format : :short , period : :variant { :ok , &quot;7:35 AM&quot; } iex&gt; Plejady.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :medium , locale : &quot;fr&quot; &quot;07:35:13&quot; iex&gt; Plejady.Cldr.Time . to_string! ~T[07:35:13.215217] , format : :medium &quot;7:35:13 AM&quot; iex&gt; { :ok , datetime } = DateTime . from_naive ( ~N[2000-01-01 23:59:59.0] , &quot;Etc/UTC&quot; ) iex&gt; Plejady.Cldr.Time . to_string! datetime , format : :long &quot;11:59:59 PM UTC&quot;","ref":"Plejady.Cldr.Time.html#to_string!/2","title":"Plejady.Cldr.Time.to_string!/2","type":"function"},{"doc":"Interval formats allow for software to format intervals like &quot;Jan 10-12, 2008&quot; as a shorter and more natural format than &quot;Jan 10, 2008 - Jan 12, 2008&quot;. They are designed to take a start and end date, time or datetime plus a formatting pattern and use that information to produce a localized format. See Cldr.Interval.to_string/3 and Cldr.Time.Interval.to_string/3","ref":"Plejady.Cldr.Time.Interval.html","title":"Plejady.Cldr.Time.Interval","type":"module"},{"doc":"","ref":"Plejady.Cldr.Time.Interval.html#do_to_string/3","title":"Plejady.Cldr.Time.Interval.do_to_string/3","type":"function"},{"doc":"","ref":"Plejady.Cldr.Time.Interval.html#do_to_string!/3","title":"Plejady.Cldr.Time.Interval.do_to_string!/3","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two times. Arguments from is any map that conforms to the Calendar.time type. to is any map that conforms to the Calendar.time type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone time. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :time , :zone , and :flex . The default is :time . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns {:ok, string} or {:error, {exception, reason}} Notes For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configured locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single time is formatted instead of an interval Examples iex&gt; Plejady.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :short { :ok , &quot;10 – 10 AM&quot; } iex&gt; Plejady.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :medium { :ok , &quot;10:00 – 10:03 AM&quot; } iex&gt; Plejady.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , format : :long { :ok , &quot;10:00 – 10:03 AM&quot; } iex&gt; Plejady.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex { :ok , &quot;10:00 – 10:03 in the morning&quot; } iex&gt; Plejady.Cldr.Time.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :flex { :ok , &quot;12:00 – 10:00 in the morning&quot; } iex&gt; Plejady.Cldr.Time.Interval . to_string ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :zone { :ok , &quot;12:00 – 10:00 AM Etc/UTC&quot; } iex&gt; Plejady.Cldr.Time.Interval . to_string ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex , locale : &quot;th&quot; { :ok , &quot;10:00 – 10:03 ในตอนเช้า&quot; } iex&gt; Plejady.Cldr.Time.Interval . to_string ~T[10:00:00] , nil { :ok , &quot;10:00:00 AM –&quot; }","ref":"Plejady.Cldr.Time.Interval.html#to_string/3","title":"Plejady.Cldr.Time.Interval.to_string/3","type":"function"},{"doc":"Returns a string representing the formatted interval formed by two times or raises an exception. Arguments from is any map that conforms to the Calendar.time type. to is any map that conforms to the Calendar.time type. to must occur on or after from . options is a keyword list of options. The default is [] . Either from or to may also be nil , in which case an open interval is formatted and the non-nil item is formatted as a standalone time. Options :format is one of :short , :medium or :long or a specific format type or a string representing of an interval format. The default is :medium . :style supports dfferent formatting styles. The alternatives are :time , :zone , and :flex . The default is :time . locale is any valid locale name returned by Cldr.known_locale_names/0 or a Cldr.LanguageTag struct. The default is Elixir.Plejady.Cldr.get_locale/0 number_system: a number system into which the formatted date digits should be transliterated Returns string or raises an exception Notes For more information on interval format string see Cldr.Interval . The available predefined formats that can be applied are the keys of the map returned by Cldr.DateTime.Format.interval_formats(&quot;en&quot;, :gregorian) where &quot;en&quot; can be replaced by any configured locale name and :gregorian is the underlying CLDR calendar type. In the case where from and to are equal, a single time is formatted instead of an interval Examples iex&gt; Plejady.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :short &quot;10 – 10 AM&quot; iex&gt; Plejady.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :medium &quot;10:00 – 10:03 AM&quot; iex&gt; Plejady.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , format : :long &quot;10:00 – 10:03 AM&quot; iex&gt; Plejady.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex &quot;10:00 – 10:03 in the morning&quot; iex&gt; Plejady.Cldr.Time.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :flex &quot;12:00 – 10:00 in the morning&quot; iex&gt; Plejady.Cldr.Time.Interval . to_string! ~U[2020-01-01 00:00:00.0Z] , ~U[2020-01-01 10:00:00.0Z] , ...&gt; format : :long , style : :zone &quot;12:00 – 10:00 AM Etc/UTC&quot; iex&gt; Plejady.Cldr.Time.Interval . to_string! ~T[10:00:00] , ~T[10:03:00] , ...&gt; format : :long , style : :flex , locale : &quot;th&quot; &quot;10:00 – 10:03 ในตอนเช้า&quot;","ref":"Plejady.Cldr.Time.Interval.html#to_string!/3","title":"Plejady.Cldr.Time.Interval.to_string!/3","type":"function"},{"doc":"Provides the model and logic for the application config. Uses a GenServer to store the config in memory and provide a simple API for accessing and updating it.","ref":"Plejady.Config.html","title":"Plejady.Config","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Plejady.Config.html#child_spec/1","title":"Plejady.Config.child_spec/1","type":"function"},{"doc":"","ref":"Plejady.Config.html#from_czech_timezone/1","title":"Plejady.Config.from_czech_timezone/1","type":"function"},{"doc":"Fetches the current config.","ref":"Plejady.Config.html#get_config/0","title":"Plejady.Config.get_config/0","type":"function"},{"doc":"Updates the current config.","ref":"Plejady.Config.html#set_config/1","title":"Plejady.Config.set_config/1","type":"function"},{"doc":"Starts the Plejady.Config GenServer implementation.","ref":"Plejady.Config.html#start_link/1","title":"Plejady.Config.start_link/1","type":"function"},{"doc":"Model and helpers for the Plejady.Config schema.","ref":"Plejady.Config.Schema.html","title":"Plejady.Config.Schema","type":"module"},{"doc":"Creates a changeset based on the Schema struct and params .","ref":"Plejady.Config.Schema.html#changeset/2","title":"Plejady.Config.Schema.changeset/2","type":"function"},{"doc":"The default value for a config.","ref":"Plejady.Config.Schema.html#default/0","title":"Plejady.Config.Schema.default/0","type":"function"},{"doc":"Takes the parameters from the form and returns a Config struct.","ref":"Plejady.Config.Schema.html#from_changeset/1","title":"Plejady.Config.Schema.from_changeset/1","type":"function"},{"doc":"Returns a new config.","ref":"Plejady.Config.Schema.html#new/2","title":"Plejady.Config.Schema.new/2","type":"function"},{"doc":"Returns a changeset with the updated guest capacity","ref":"Plejady.Config.Schema.html#update_guest_capacity/2","title":"Plejady.Config.Schema.update_guest_capacity/2","type":"function"},{"doc":"This module defines the setup for tests requiring access to the application's data layer. You may define functions here to be used as helpers in your tests. Finally, if the test case interacts with the database, we enable the SQL sandbox, so changes done to the database are reverted at the end of every test. If you are using PostgreSQL, you can even run database tests asynchronously by setting use Plejady.DataCase, async: true , although this option is not recommended for other databases.","ref":"Plejady.DataCase.html","title":"Plejady.DataCase","type":"module"},{"doc":"A helper that transforms changeset errors into a map of messages. assert { :error , changeset } = Accounts . create_user ( %{ password : &quot;short&quot; } ) assert &quot;password is too short&quot; in errors_on ( changeset ) . password assert %{ password : [ &quot;password is too short&quot; ] } = errors_on ( changeset )","ref":"Plejady.DataCase.html#errors_on/1","title":"Plejady.DataCase.errors_on/1","type":"function"},{"doc":"Sets up the sandbox based on the test tags.","ref":"Plejady.DataCase.html#setup_sandbox/1","title":"Plejady.DataCase.setup_sandbox/1","type":"function"},{"doc":"Provides the model and logic for presentations.","ref":"Plejady.Presentation.html","title":"Plejady.Presentation","type":"module"},{"doc":"Fetches all presentations from the database.","ref":"Plejady.Presentation.html#all/0","title":"Plejady.Presentation.all/0","type":"function"},{"doc":"Fetches all presentations from the database, preloading their room, timeblock and registrations.","ref":"Plejady.Presentation.html#all_preloaded/0","title":"Plejady.Presentation.all_preloaded/0","type":"function"},{"doc":"Creates a new changeset based on the presentation struct and params .","ref":"Plejady.Presentation.html#changeset/2","title":"Plejady.Presentation.changeset/2","type":"function"},{"doc":"Creates a new presentation and inserts it into the database. This is a database action.","ref":"Plejady.Presentation.html#create/2","title":"Plejady.Presentation.create/2","type":"function"},{"doc":"Deletes a presentation from the database. This is a database action.","ref":"Plejady.Presentation.html#delete/1","title":"Plejady.Presentation.delete/1","type":"function"},{"doc":"Fetches a presentation by its ID from the database.","ref":"Plejady.Presentation.html#get!/1","title":"Plejady.Presentation.get!/1","type":"function"},{"doc":"Updates a new presentation and updates it in the database. This is a database action.","ref":"Plejady.Presentation.html#update/2","title":"Plejady.Presentation.update/2","type":"function"},{"doc":"Provides the model and logic for registrations.","ref":"Plejady.Registration.html","title":"Plejady.Registration","type":"module"},{"doc":"Creates a new changeset based on the registration struct and params .","ref":"Plejady.Registration.html#changeset/2","title":"Plejady.Registration.changeset/2","type":"function"},{"doc":"Moves a registration from one presentation to another. Arguments from and to are presentation IDs. This is a database action.","ref":"Plejady.Registration.html#move/3","title":"Plejady.Registration.move/3","type":"function"},{"doc":"Creates a new registration and inserts it into the database. This is a database action.","ref":"Plejady.Registration.html#new/2","title":"Plejady.Registration.new/2","type":"function"},{"doc":"This module is responsible for managing the registry of presentations and their occupancy. It provides a super fast read-write cache for the real-time component of the app with fire-and-forget requests to the database for permanent storage. The Plejady.Registry struct is considered a source of truth for the app while running. It is prefetched with data from the database to avoid thousands of lookup requests. Next, it provides utility functions for fetching the occupancy of a presentation.","ref":"Plejady.Registry.html","title":"Plejady.Registry","type":"module"},{"doc":"Returns the statically-defined name of the cache used by the registry.","ref":"Plejady.Registry.html#cache_name/0","title":"Plejady.Registry.cache_name/0","type":"function"},{"doc":"Clears the cache.","ref":"Plejady.Registry.html#clear/0","title":"Plejady.Registry.clear/0","type":"function"},{"doc":"Fetches the occupancy of all presentations. Returns a map where keys are Plejady.Presentation ids and values are the number of signed users.","ref":"Plejady.Registry.html#fetch_occupancy/0","title":"Plejady.Registry.fetch_occupancy/0","type":"function"},{"doc":"Returns a list of Plejady.Presentation ids that a user specified by user_id is signed up for.","ref":"Plejady.Registry.html#fetch_signed_up_for/2","title":"Plejady.Registry.fetch_signed_up_for/2","type":"function"},{"doc":"Fetches the registry from the cache.","ref":"Plejady.Registry.html#get/0","title":"Plejady.Registry.get/0","type":"function"},{"doc":"Creates a new registry struct.","ref":"Plejady.Registry.html#new/3","title":"Plejady.Registry.new/3","type":"function"},{"doc":"","ref":"Plejady.Registry.html#update/3","title":"Plejady.Registry.update/3","type":"function"},{"doc":"","ref":"Plejady.Registry.html#t:t/0","title":"Plejady.Registry.t/0","type":"type"},{"doc":"Used for executing DB release tasks when run in production without Mix installed.","ref":"Plejady.Release.html","title":"Plejady.Release","type":"module"},{"doc":"","ref":"Plejady.Release.html#migrate/0","title":"Plejady.Release.migrate/0","type":"function"},{"doc":"","ref":"Plejady.Release.html#rollback/2","title":"Plejady.Release.rollback/2","type":"function"},{"doc":"The Ecto repository for this application. The functions here are automatically generated use Ecto.Repo .","ref":"Plejady.Repo.html","title":"Plejady.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"Plejady.Repo.html#aggregate/3","title":"Plejady.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"Plejady.Repo.html#aggregate/4","title":"Plejady.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"Plejady.Repo.html#all/2","title":"Plejady.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"Plejady.Repo.html#checked_out?/0","title":"Plejady.Repo.checked_out?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"Plejady.Repo.html#checkout/2","title":"Plejady.Repo.checkout/2","type":"function"},{"doc":"","ref":"Plejady.Repo.html#child_spec/1","title":"Plejady.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"Plejady.Repo.html#config/0","title":"Plejady.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"Plejady.Repo.html#default_options/1","title":"Plejady.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"Plejady.Repo.html#delete/2","title":"Plejady.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"Plejady.Repo.html#delete!/2","title":"Plejady.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"Plejady.Repo.html#delete_all/2","title":"Plejady.Repo.delete_all/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"Plejady.Repo.html#disconnect_all/2","title":"Plejady.Repo.disconnect_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"Plejady.Repo.html#exists?/2","title":"Plejady.Repo.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"Plejady.Repo.html#explain/3","title":"Plejady.Repo.explain/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"Plejady.Repo.html#get/3","title":"Plejady.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"Plejady.Repo.html#get!/3","title":"Plejady.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"Plejady.Repo.html#get_by/3","title":"Plejady.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"Plejady.Repo.html#get_by!/3","title":"Plejady.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"Plejady.Repo.html#get_dynamic_repo/0","title":"Plejady.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"Plejady.Repo.html#in_transaction?/0","title":"Plejady.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"Plejady.Repo.html#insert/2","title":"Plejady.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"Plejady.Repo.html#insert!/2","title":"Plejady.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"Plejady.Repo.html#insert_all/3","title":"Plejady.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"Plejady.Repo.html#insert_or_update/2","title":"Plejady.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"Plejady.Repo.html#insert_or_update!/2","title":"Plejady.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"Plejady.Repo.html#load/2","title":"Plejady.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"Plejady.Repo.html#one/2","title":"Plejady.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"Plejady.Repo.html#one!/2","title":"Plejady.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"Plejady.Repo.html#preload/3","title":"Plejady.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"Plejady.Repo.html#prepare_query/3","title":"Plejady.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"Plejady.Repo.html#put_dynamic_repo/1","title":"Plejady.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Plejady.Repo.html#query/3","title":"Plejady.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Plejady.Repo.html#query!/3","title":"Plejady.Repo.query!/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"Plejady.Repo.html#query_many/3","title":"Plejady.Repo.query_many/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"Plejady.Repo.html#query_many!/3","title":"Plejady.Repo.query_many!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"Plejady.Repo.html#reload/2","title":"Plejady.Repo.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"Plejady.Repo.html#reload!/2","title":"Plejady.Repo.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"Plejady.Repo.html#rollback/1","title":"Plejady.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"Plejady.Repo.html#start_link/1","title":"Plejady.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"Plejady.Repo.html#stop/1","title":"Plejady.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"Plejady.Repo.html#stream/2","title":"Plejady.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Plejady.Repo.html#to_sql/2","title":"Plejady.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"Plejady.Repo.html#transaction/2","title":"Plejady.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"Plejady.Repo.html#update/2","title":"Plejady.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"Plejady.Repo.html#update!/2","title":"Plejady.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"Plejady.Repo.html#update_all/3","title":"Plejady.Repo.update_all/3","type":"function"},{"doc":"Provides the model and logic for rooms.","ref":"Plejady.Room.html","title":"Plejady.Room","type":"module"},{"doc":"Returns a list of all rooms.","ref":"Plejady.Room.html#all/0","title":"Plejady.Room.all/0","type":"function"},{"doc":"Creates a new changeset based on the room struct and params .","ref":"Plejady.Room.html#changeset/2","title":"Plejady.Room.changeset/2","type":"function"},{"doc":"Creates a new room and inserts it into the database. This is a database action.","ref":"Plejady.Room.html#create/1","title":"Plejady.Room.create/1","type":"function"},{"doc":"Deletes a room by id. This is a database action.","ref":"Plejady.Room.html#delete/1","title":"Plejady.Room.delete/1","type":"function"},{"doc":"Fetch a room by id.","ref":"Plejady.Room.html#get!/1","title":"Plejady.Room.get!/1","type":"function"},{"doc":"Updates a room with the included params in the database. This is a database action.","ref":"Plejady.Room.html#update/2","title":"Plejady.Room.update/2","type":"function"},{"doc":"This module defines test helpers for creating entities via the Plejady.Testing context.","ref":"Plejady.TestingFixtures.html","title":"Plejady.TestingFixtures","type":"module"},{"doc":"Generate a test.","ref":"Plejady.TestingFixtures.html#test_fixture/1","title":"Plejady.TestingFixtures.test_fixture/1","type":"function"},{"doc":"Provides the model and logic for timeblocks.","ref":"Plejady.Timeblock.html","title":"Plejady.Timeblock","type":"module"},{"doc":"Returns a list of all timeblocks.","ref":"Plejady.Timeblock.html#all/0","title":"Plejady.Timeblock.all/0","type":"function"},{"doc":"Creates a new changeset based on the timeblock struct and params .","ref":"Plejady.Timeblock.html#changeset/2","title":"Plejady.Timeblock.changeset/2","type":"function"},{"doc":"Creates a new timeblock and inserts it into the database. This is a database action.","ref":"Plejady.Timeblock.html#create/1","title":"Plejady.Timeblock.create/1","type":"function"},{"doc":"Deletes a timeblock by id. This is a database action.","ref":"Plejady.Timeblock.html#delete/1","title":"Plejady.Timeblock.delete/1","type":"function"},{"doc":"","ref":"Plejady.Timeblock.html#format_time/1","title":"Plejady.Timeblock.format_time/1","type":"function"},{"doc":"Returns a single timeblock by id. If no timeblock is found, returns nil .","ref":"Plejady.Timeblock.html#get!/1","title":"Plejady.Timeblock.get!/1","type":"function"},{"doc":"Updates a timeblock with the included params in the database.","ref":"Plejady.Timeblock.html#update/2","title":"Plejady.Timeblock.update/2","type":"function"},{"doc":"GenServer for handling timed release of the application.","ref":"Plejady.TimedRelease.html","title":"Plejady.TimedRelease","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Plejady.TimedRelease.html#child_spec/1","title":"Plejady.TimedRelease.child_spec/1","type":"function"},{"doc":"The entrypoint for defining your web interface, such as controllers, components, channels, and so on. This can be used in your application as: use PlejadyWeb , :controller use PlejadyWeb , :html The definitions below will be executed for every controller, component, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define additional modules and import those modules here.","ref":"PlejadyWeb.html","title":"PlejadyWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"PlejadyWeb.html#__using__/1","title":"PlejadyWeb.__using__/1","type":"macro"},{"doc":"","ref":"PlejadyWeb.html#channel/0","title":"PlejadyWeb.channel/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#controller/0","title":"PlejadyWeb.controller/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#html/0","title":"PlejadyWeb.html/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#live_component/0","title":"PlejadyWeb.live_component/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#live_view/0","title":"PlejadyWeb.live_view/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#router/0","title":"PlejadyWeb.router/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#static_paths/0","title":"PlejadyWeb.static_paths/0","type":"function"},{"doc":"","ref":"PlejadyWeb.html#verified_routes/0","title":"PlejadyWeb.verified_routes/0","type":"function"},{"doc":"Controller for handling authentication. Uses Ueberauth to simplify the code in the app itself.","ref":"PlejadyWeb.AuthController.html","title":"PlejadyWeb.AuthController","type":"module"},{"doc":"Callback after an OAuth authentication. Handles both successful and unsuccessful logins.","ref":"PlejadyWeb.AuthController.html#callback/2","title":"PlejadyWeb.AuthController.callback/2","type":"function"},{"doc":"Used in the app router to log out the user.","ref":"PlejadyWeb.AuthController.html#delete/2","title":"PlejadyWeb.AuthController.delete/2","type":"function"},{"doc":"Called when Ueberauth tries to authenticate the user. Either the authentication method is supported and the calling of this function is hijacked by the Ueberauth provider, or this function is called and an error is shown.","ref":"PlejadyWeb.AuthController.html#request/2","title":"PlejadyWeb.AuthController.request/2","type":"function"},{"doc":"This module defines the test case to be used by tests that require setting up a connection. Such tests rely on Phoenix.ConnTest and also import other functionality to make it easier to build common data structures and query the data layer. Finally, if the test case interacts with the database, we enable the SQL sandbox, so changes done to the database are reverted at the end of every test. If you are using PostgreSQL, you can even run database tests asynchronously by setting use PlejadyWeb.ConnCase, async: true , although this option is not recommended for other databases.","ref":"PlejadyWeb.ConnCase.html","title":"PlejadyWeb.ConnCase","type":"module"},{"doc":"Provides core UI components. The components in this module use Tailwind CSS, a utility-first CSS framework. See the Tailwind CSS documentation to learn how to customize the generated components in this module. Icons are provided by heroicons . See icon/1 for usage.","ref":"PlejadyWeb.CoreComponents.html","title":"PlejadyWeb.CoreComponents","type":"module"},{"doc":"Renders a back navigation link. Examples &lt; . back navigate = { ~p&quot;/posts&quot; } &gt; Back to posts &lt; / . back &gt; Attributes navigate ( :any ) (required) Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#back/1","title":"PlejadyWeb.CoreComponents.back/1","type":"function"},{"doc":"Renders a button. Examples &lt; . button &gt; Send ! &lt; / . button &gt; &lt; . button phx - click = &quot;go&quot; class = &quot;ml-2&quot; &gt; Send ! &lt; / . button &gt; Attributes type ( :string ) - Defaults to nil . class ( :string ) - Defaults to nil . Global attributes are accepted. Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#button/1","title":"PlejadyWeb.CoreComponents.button/1","type":"function"},{"doc":"Generates a generic error message. Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#error/1","title":"PlejadyWeb.CoreComponents.error/1","type":"function"},{"doc":"Renders flash notices. Examples &lt; . flash kind = { :info } flash = { @flash } / &gt; &lt; . flash kind = { :info } phx - mounted = { show ( &quot;#flash&quot; ) } &gt; Welcome Back ! &lt; / . flash &gt; Attributes id ( :string ) - the optional id of flash container. Defaults to &quot;flash&quot; . flash ( :map ) - the map of flash messages to display. Defaults to %{} . title ( :string ) - Defaults to nil . kind ( :atom ) - used for styling and flash lookup.Must be one of :info , or :error . autoshow ( :boolean ) - whether to auto show the flash on mount. Defaults to true . close ( :boolean ) - whether the flash can be closed. Defaults to true . Global attributes are accepted. Slots inner_block - the optional inner block that renders the flash message.","ref":"PlejadyWeb.CoreComponents.html#flash/1","title":"PlejadyWeb.CoreComponents.flash/1","type":"function"},{"doc":"Shows the flash group with standard titles and content. Examples &lt; . flash_group flash = { @flash } / &gt; Attributes flash ( :map ) (required) - the map of flash messages.","ref":"PlejadyWeb.CoreComponents.html#flash_group/1","title":"PlejadyWeb.CoreComponents.flash_group/1","type":"function"},{"doc":"Renders a header with title. Attributes class ( :string ) - Defaults to nil . Slots inner_block (required) subtitle actions","ref":"PlejadyWeb.CoreComponents.html#header/1","title":"PlejadyWeb.CoreComponents.header/1","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#hide/2","title":"PlejadyWeb.CoreComponents.hide/2","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#hide_modal/2","title":"PlejadyWeb.CoreComponents.hide_modal/2","type":"function"},{"doc":"Renders a Hero Icon . Hero icons come in three styles – outline, solid, and mini. By default, the outline style is used, but solid an mini may be applied by using the -solid and -mini suffix. You can customize the size and colors of the icons by setting width, height, and background color classes. Icons are extracted from your priv/hero_icons directory and bundled within your compiled app.css by the plugin in your assets/tailwind.config.js . Examples &lt; . icon name = &quot;hero-cake&quot; / &gt; &lt; . icon name = &quot;hero-cake-solid&quot; / &gt; &lt; . icon name = &quot;hero-cake-mini&quot; / &gt; &lt; . icon name = &quot;hero-bolt&quot; class = &quot;bg-blue-500 w-10 h-10&quot; / &gt; Attributes name ( :string ) (required) class ( :string ) - Defaults to nil .","ref":"PlejadyWeb.CoreComponents.html#icon/1","title":"PlejadyWeb.CoreComponents.icon/1","type":"function"},{"doc":"Renders an input with label and error messages. A %Phoenix.HTML.Form{} and field name may be passed to the input to build input names and error messages, or all the attributes and errors may be passed explicitly. Examples &lt; . input field = { @form [ :email ] } type = &quot;email&quot; / &gt; &lt; . input name = &quot;my-input&quot; errors = { [ &quot;oh no!&quot; ] } / &gt; Attributes id ( :any ) - Defaults to nil . name ( :any ) label ( :string ) - Defaults to nil . value ( :any ) type ( :string ) - Defaults to &quot;text&quot; . field ( Phoenix.HTML.FormField ) - a form field struct retrieved from the form, for example: @form[:email]. errors ( :list ) - Defaults to [] . checked ( :boolean ) - the checked flag for checkbox inputs. prompt ( :string ) - the prompt for select inputs. Defaults to nil . options ( :list ) - the options to pass to Phoenix.HTML.Form.options_for_select/2. multiple ( :boolean ) - the multiple flag for select inputs. Defaults to false . Global attributes are accepted. Slots inner_block","ref":"PlejadyWeb.CoreComponents.html#input/1","title":"PlejadyWeb.CoreComponents.input/1","type":"function"},{"doc":"Renders a label. Attributes for ( :string ) - Defaults to nil . Slots inner_block (required)","ref":"PlejadyWeb.CoreComponents.html#label/1","title":"PlejadyWeb.CoreComponents.label/1","type":"function"},{"doc":"Renders a data list. Examples &lt; . list &gt; &lt; :item title = &quot;Title&quot; &gt; &lt; % = @post . title % &gt; &lt; / :item &gt; &lt; :item title = &quot;Views&quot; &gt; &lt; % = @post . views % &gt; &lt; / :item &gt; &lt; / . list &gt; Slots item (required) - Accepts attributes: title ( :string ) (required)","ref":"PlejadyWeb.CoreComponents.html#list/1","title":"PlejadyWeb.CoreComponents.list/1","type":"function"},{"doc":"Renders a modal. Examples &lt; . modal id = &quot;confirm-modal&quot; &gt; Are you sure? &lt; :confirm &gt; OK &lt; / :confirm &gt; &lt; :cancel &gt; Cancel &lt; / :cancel &gt; &lt; / . modal &gt; JS commands may be passed to the :on_cancel and on_confirm attributes for the caller to react to each button press, for example: &lt; . modal id = &quot;confirm&quot; on_confirm = { JS . push ( &quot;delete&quot; ) } on_cancel = { JS . navigate ( ~p&quot;/posts&quot; ) } &gt; Are you sure you? &lt; :confirm &gt; OK &lt; / :confirm &gt; &lt; :cancel &gt; Cancel &lt; / :cancel &gt; &lt; / . modal &gt; Attributes id ( :string ) (required) show ( :boolean ) - Defaults to false . on_cancel ( Phoenix.LiveView.JS ) - Defaults to %Phoenix.LiveView.JS{ops: []} . on_confirm ( Phoenix.LiveView.JS ) - Defaults to %Phoenix.LiveView.JS{ops: []} . Slots inner_block (required) title subtitle confirm cancel","ref":"PlejadyWeb.CoreComponents.html#modal/1","title":"PlejadyWeb.CoreComponents.modal/1","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#show/2","title":"PlejadyWeb.CoreComponents.show/2","type":"function"},{"doc":"","ref":"PlejadyWeb.CoreComponents.html#show_modal/2","title":"PlejadyWeb.CoreComponents.show_modal/2","type":"function"},{"doc":"Renders a simple form. Examples &lt; . simple_form for = { @form } phx - change = &quot;validate&quot; phx - submit = &quot;save&quot; &gt; &lt; . input field = { @form [ :email ] } label = &quot;Email&quot; / &gt; &lt; . input field = { @form [ :username ] } label = &quot;Username&quot; / &gt; &lt; :actions &gt; &lt; . button &gt; Save &lt; / . button &gt; &lt; / :actions &gt; &lt; / . simple_form &gt; Attributes for ( :any ) (required) - the datastructure for the form. as ( :any ) - the server side parameter to collect all input under. Defaults to nil . Global attributes are accepted. Slots inner_block (required) actions - the slot for form actions, such as a submit button.","ref":"PlejadyWeb.CoreComponents.html#simple_form/1","title":"PlejadyWeb.CoreComponents.simple_form/1","type":"function"},{"doc":"Renders a table with generic styling. Examples &lt; . table id = &quot;users&quot; rows = { @users } &gt; &lt; :col :let = { user } label = &quot;id&quot; &gt; &lt; % = user . id % &gt; &lt; / :col &gt; &lt; :col :let = { user } label = &quot;username&quot; &gt; &lt; % = user . username % &gt; &lt; / :col &gt; &lt; / . table &gt; Attributes id ( :string ) (required) class ( :string ) - Defaults to nil . rows ( :list ) (required) row_id ( :any ) - the function for generating the row id. Defaults to nil . row_click ( :any ) - the function for handling phx-click on each row. Defaults to nil . row_item ( :any ) - the function for mapping each row before calling the :col and :action slots. Defaults to &amp;Function.identity/1 . Slots col (required) - Accepts attributes: label ( :string ) class ( :string ) action - the slot for showing user actions in the last table column.","ref":"PlejadyWeb.CoreComponents.html#table/1","title":"PlejadyWeb.CoreComponents.table/1","type":"function"},{"doc":"Translates an error message using gettext.","ref":"PlejadyWeb.CoreComponents.html#translate_error/1","title":"PlejadyWeb.CoreComponents.translate_error/1","type":"function"},{"doc":"Translates the errors for a field from a keyword list of errors.","ref":"PlejadyWeb.CoreComponents.html#translate_errors/2","title":"PlejadyWeb.CoreComponents.translate_errors/2","type":"function"},{"doc":"The endpoint for the PlejadyWeb application. Encapsulates all socket and plug configuration.","ref":"PlejadyWeb.Endpoint.html","title":"PlejadyWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"PlejadyWeb.Endpoint.html#broadcast/3","title":"PlejadyWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"PlejadyWeb.Endpoint.html#broadcast!/3","title":"PlejadyWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"PlejadyWeb.Endpoint.html#broadcast_from/4","title":"PlejadyWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"PlejadyWeb.Endpoint.html#broadcast_from!/4","title":"PlejadyWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2 .","ref":"PlejadyWeb.Endpoint.html#call/2","title":"PlejadyWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"PlejadyWeb.Endpoint.html#child_spec/1","title":"PlejadyWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"PlejadyWeb.Endpoint.html#config/2","title":"PlejadyWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"PlejadyWeb.Endpoint.html#config_change/2","title":"PlejadyWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"PlejadyWeb.Endpoint.html#host/0","title":"PlejadyWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"PlejadyWeb.Endpoint.html#init/1","title":"PlejadyWeb.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"PlejadyWeb.Endpoint.html#local_broadcast/3","title":"PlejadyWeb.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"PlejadyWeb.Endpoint.html#local_broadcast_from/4","title":"PlejadyWeb.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"PlejadyWeb.Endpoint.html#path/1","title":"PlejadyWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"PlejadyWeb.Endpoint.html#script_name/0","title":"PlejadyWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree. All other options are merged into the endpoint configuration.","ref":"PlejadyWeb.Endpoint.html#start_link/1","title":"PlejadyWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"PlejadyWeb.Endpoint.html#static_integrity/1","title":"PlejadyWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"PlejadyWeb.Endpoint.html#static_lookup/1","title":"PlejadyWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static .","ref":"PlejadyWeb.Endpoint.html#static_path/1","title":"PlejadyWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"PlejadyWeb.Endpoint.html#static_url/0","title":"PlejadyWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"PlejadyWeb.Endpoint.html#struct_url/0","title":"PlejadyWeb.Endpoint.struct_url/0","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"PlejadyWeb.Endpoint.html#subscribe/2","title":"PlejadyWeb.Endpoint.subscribe/2","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"PlejadyWeb.Endpoint.html#unsubscribe/1","title":"PlejadyWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"PlejadyWeb.Endpoint.html#url/0","title":"PlejadyWeb.Endpoint.url/0","type":"function"},{"doc":"Component library for the app header.","ref":"PlejadyWeb.Header.html","title":"PlejadyWeb.Header","type":"module"},{"doc":"A LiveComponent that renders the app header. Attributes title ( :string ) (required) current_user ( :map ) (required) Global attributes are accepted. Slots actions","ref":"PlejadyWeb.Header.html#app_header/1","title":"PlejadyWeb.Header.app_header/1","type":"function"},{"doc":"Provides LiveView hooks and helper functions for user authentication.","ref":"PlejadyWeb.UserAuth.html","title":"PlejadyWeb.UserAuth","type":"module"},{"doc":"Fetches the user that is saved in the socket token.","ref":"PlejadyWeb.UserAuth.html#fetch_current_user/2","title":"PlejadyWeb.UserAuth.fetch_current_user/2","type":"function"},{"doc":"Transforms the Ueberauth.Auth struct into a User struct and saves it to the database. This is a database action.","ref":"PlejadyWeb.UserAuth.html#get_user_by_auth/1","title":"PlejadyWeb.UserAuth.get_user_by_auth/1","type":"function"},{"doc":"Creates a new socket and logs the user in.","ref":"PlejadyWeb.UserAuth.html#log_in_user/3","title":"PlejadyWeb.UserAuth.log_in_user/3","type":"function"},{"doc":"Logs the user out.","ref":"PlejadyWeb.UserAuth.html#log_out_user/1","title":"PlejadyWeb.UserAuth.log_out_user/1","type":"function"},{"doc":"A LiveView hook ensuring multiple levels of authentication. The first argument is an atom and can be :ensure_authenticated , :ensure_admin or :ensure_lead .","ref":"PlejadyWeb.UserAuth.html#on_mount/4","title":"PlejadyWeb.UserAuth.on_mount/4","type":"function"},{"doc":"If a user is detected in the conn struct, they are automatically redirected to the app.","ref":"PlejadyWeb.UserAuth.html#redirect_if_user_is_authenticated/1","title":"PlejadyWeb.UserAuth.redirect_if_user_is_authenticated/1","type":"function"},{"doc":"An event management system for a yearly school event.","ref":"readme.html","title":"Overview","type":"extras"},{"doc":"Install Elixir Follow these instructions for configuring the app. Run mix deps.get to install dependencies Run mix phx.server to start a local server! ⚠️ You need to have a PostgreSQL database running on your local machine.","ref":"readme.html#development","title":"Overview - Development","type":"extras"},{"doc":"Before installing dependencies, you need to properly configure the application. This is done by creating a dev.secret.exs file in the config directory of the project. Copy the dev.secret.exs.example file to config/dev.secret.exs Change the values in the file to match your local setup. client_id and client_secret are the OAuth credentials for the Google API. You can get them here . Make sure you select the right project. There are also database credentials. You need to change them to match your local setup. If you're using Docker to host your local database, you can use the default values.","ref":"readme.html#configuring-the-application","title":"Overview - Configuring the application","type":"extras"},{"doc":"You can either deploy to fly.io (easy-ish) or self-host the entire project. If you don't have a server, then go for fly.io or contact Martin Rosenberg (nitram.rosenberg@gmail.com), he will lend you one. Fly.io Fly.io is a hosting service which makes it easy to deploy Elixir applications. It takes care of the entire deployment process, so you don't have to worry about it. The disadvantage is that it's not free — well, they do have a free tier, but it's not really suitable for this project. To set up deployment to fly.io, you need to: Install the flyctl CLI tool. Authenticate with flyctl auth login . Launch the app with flyctl launch . This will create a new app on fly.io. The CLI will ask you if you want to create a database. Answer y (yes). IMPORTANT: When the CLI asks you if you want to deploy the app, answer n (no). Set the needed environment variables with flyctl env set &lt;key&gt;=&lt;value&gt; . See this section for a list of environment variables which need to be set. Deploy the app with flyctl deploy . Go to the fly.io dashboard and click on the &quot;Scale&quot; menu item. The recomended settings are: TBD To set up a custom domain, check out the following steps: In this section, we will assume that you want to use the domain plejady.alej.cz for the app. Run fly ips list to get a list of available IPs. This should return a list of 2 IPs – one for IPv4 and one for IPv6. Write an email to Mr. Horálek (or whoever is in charge of the domain) and ask him to add two DNS records for the domain. A record for the IPv4 address. AAAA record for the IPv6 address. Run fly certs create plejady.alej.cz to create a certificate for the domain. This can take some time, so be patient. You can check on the progress using fly certs show plejady.alej.cz . Important environment variables for hosting on fly.io To set the environment variables, use the flyctl env set &lt;key&gt;=&lt;value&gt; command. The following variables need to be set: GOOGLE_CLIENT_ID - The OAuth client ID for the Google API. GOOGLE_CLIENT_SECRET - The OAuth client secret for the Google API. Docker To deploy with Docker, use the provided docker-compose.yml to run the app with a separate PostgreSQL database. See this section for a list of environment variables which need to be set. Important environment variables for self-hosting When starting the Docker container ( NOT building it), you need to set the following environment variables: DATABASE_URL - The URL to the PostgreSQL database. If you're using fly.io, this is automatically set. GOOGLE_CLIENT_ID - The OAuth client ID for the Google API. GOOGLE_CLIENT_SECRET - The OAuth client secret for the Google API. SECRET_KEY_BASE - A secret key used for signing cookies. You can generate one with mix phx.gen.secret . PHX_HOST - The host of the application. In this case, it will be something like plejady.alej.cz . If you're using fly.io, this is automatically set.","ref":"readme.html#deployment","title":"Overview - Deployment","type":"extras"},{"doc":"","ref":"user_manual.html","title":"User Manual (Czech)","type":"extras"}]